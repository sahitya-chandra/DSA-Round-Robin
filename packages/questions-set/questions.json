[
  {
    "id": 1,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Given an array of integers, return the sum of all elements in the array.",
    "testcases": [
      {"input": "[1, 2, 3, 4, 5]", "expected_output": "15"},
      {"input": "[10, 20, 30]", "expected_output": "60"},
      {"input": "[-1, -2, -3]", "expected_output": "-6"},
      {"input": "[0]", "expected_output": "0"},
      {"input": "[]", "expected_output": "0"}
    ]
  },
  {
    "id": 2,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Given an array of integers, find the maximum value in the array.",
    "testcases": [
      {"input": "[1, 3, 2, 5, 4]", "expected_output": "5"},
      {"input": "[10, 20, 30, 40]", "expected_output": "40"},
      {"input": "[-1, -5, -3]", "expected_output": "-1"},
      {"input": "[0]", "expected_output": "0"},
      {"input": "[100, 200, 150]", "expected_output": "200"}
    ]
  },
  {
    "id": 3,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Given an array of integers, reverse the array in place.",
    "testcases": [
      {"input": "[1, 2, 3, 4, 5]", "expected_output": "[5, 4, 3, 2, 1]"},
      {"input": "[10, 20]", "expected_output": "[20, 10]"},
      {"input": "[-1, 0, 1]", "expected_output": "[1, 0, -1]"},
      {"input": "[5]", "expected_output": "[5]"},
      {"input": "[]", "expected_output": "[]"}
    ]
  },
  {
    "id": 4,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Given an array of integers and a target, check if the target exists in the array.",
    "testcases": [
      {"input": "[1, 2, 3, 4, 5], target=3", "expected_output": "true"},
      {"input": "[10, 20, 30], target=40", "expected_output": "false"},
      {"input": "[-1, -2, -3], target=-2", "expected_output": "true"},
      {"input": "[0], target=0", "expected_output": "true"},
      {"input": "[], target=1", "expected_output": "false"}
    ]
  },
  {
    "id": 5,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Given an array of integers, return the average of all elements.",
    "testcases": [
      {"input": "[1, 2, 3, 4, 5]", "expected_output": "3.0"},
      {"input": "[10, 20, 30]", "expected_output": "20.0"},
      {"input": "[-1, 1]", "expected_output": "0.0"},
      {"input": "[5]", "expected_output": "5.0"},
      {"input": "[2, 4, 6, 8]", "expected_output": "5.0"}
    ]
  },
  {
    "id": 6,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Given two arrays, merge them into a single sorted array.",
    "testcases": [
      {"input": "[1, 3, 5], [2, 4, 6]", "expected_output": "[1, 2, 3, 4, 5, 6]"},
      {"input": "[10, 20], [30, 40]", "expected_output": "[10, 20, 30, 40]"},
      {"input": "[-1, 1], [0]", "expected_output": "[-1, 0, 1]"},
      {"input": "[], [1, 2]", "expected_output": "[1, 2]"},
      {"input": "[5, 7], [6]", "expected_output": "[5, 6, 7]"}
    ]
  },
  {
    "id": 7,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Given an array of integers, remove duplicates and return the unique elements.",
    "testcases": [
      {"input": "[1, 2, 2, 3, 3]", "expected_output": "[1, 2, 3]"},
      {"input": "[10, 10, 20, 20]", "expected_output": "[10, 20]"},
      {"input": "[-1, -1, 1, 1]", "expected_output": "[-1, 1]"},
      {"input": "[5]", "expected_output": "[5]"},
      {"input": "[1, 1, 1]", "expected_output": "[1]"}
    ]
  },
  {
    "id": 8,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Given an array of integers, find the minimum value.",
    "testcases": [
      {"input": "[5, 3, 1, 4, 2]", "expected_output": "1"},
      {"input": "[40, 30, 20, 10]", "expected_output": "10"},
      {"input": "[-3, -1, -5]", "expected_output": "-5"},
      {"input": "[0]", "expected_output": "0"},
      {"input": "[100, 50, 200]", "expected_output": "50"}
    ]
  },
  {
    "id": 9,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Given an array of strings, sort them in alphabetical order.",
    "testcases": [
      {"input": "[\"banana\", \"apple\", \"cherry\"]", "expected_output": "[\"apple\", \"banana\", \"cherry\"]"},
      {"input": "[\"dog\", \"cat\", \"bird\"]", "expected_output": "[\"bird\", \"cat\", \"dog\"]"},
      {"input": "[\"zebra\", \"ant\"]", "expected_output": "[\"ant\", \"zebra\"]"},
      {"input": "[\"same\"]", "expected_output": "[\"same\"]"},
      {"input": "[]", "expected_output": "[]"}
    ]
  },
  {
    "id": 10,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Given an array of integers, count the number of even numbers.",
    "testcases": [
      {"input": "[1, 2, 3, 4, 5]", "expected_output": "2"},
      {"input": "[10, 20, 30]", "expected_output": "3"},
      {"input": "[-2, -4, 0]", "expected_output": "3"},
      {"input": "[1]", "expected_output": "0"},
      {"input": "[2, 4, 6, 8]", "expected_output": "4"}
    ]
  },
  {
    "id": 11,
    "category": "strings",
    "difficulty": "easy",
    "question": "Given a string, return its length.",
    "testcases": [
      {"input": "\"hello\"", "expected_output": "5"},
      {"input": "\"world\"", "expected_output": "5"},
      {"input": "\"\"", "expected_output": "0"},
      {"input": "\"a\"", "expected_output": "1"},
      {"input": "\"good morning\"", "expected_output": "12"}
    ]
  },
  {
    "id": 12,
    "category": "strings",
    "difficulty": "easy",
    "question": "Given a string, reverse it.",
    "testcases": [
      {"input": "\"hello\"", "expected_output": "\"olleh\""},
      {"input": "\"world\"", "expected_output": "\"dlrow\""},
      {"input": "\"\"", "expected_output": "\"\""},
      {"input": "\"a\"", "expected_output": "\"a\""},
      {"input": "\"ab\"", "expected_output": "\"ba\""}
    ]
  },
  {
    "id": 13,
    "category": "strings",
    "difficulty": "easy",
    "question": "Given a string, check if it is a palindrome.",
    "testcases": [
      {"input": "\"radar\"", "expected_output": "true"},
      {"input": "\"hello\"", "expected_output": "false"},
      {"input": "\"\"", "expected_output": "true"},
      {"input": "\"a\"", "expected_output": "true"},
      {"input": "\"abba\"", "expected_output": "true"}
    ]
  },
  {
    "id": 14,
    "category": "strings",
    "difficulty": "easy",
    "question": "Given a string, convert it to uppercase.",
    "testcases": [
      {"input": "\"hello\"", "expected_output": "\"HELLO\""},
      {"input": "\"world\"", "expected_output": "\"WORLD\""},
      {"input": "\"\"", "expected_output": "\"\""},
      {"input": "\"A\"", "expected_output": "\"A\""},
      {"input": "\"mixed case\"", "expected_output": "\"MIXED CASE\""}
    ]
  },
  {
    "id": 15,
    "category": "strings",
    "difficulty": "easy",
    "question": "Given a string and a character, count occurrences of the character.",
    "testcases": [
      {"input": "\"hello\", 'l'", "expected_output": "2"},
      {"input": "\"world\", 'o'", "expected_output": "1"},
      {"input": "\"\", 'a'", "expected_output": "0"},
      {"input": "\"aaa\", 'a'", "expected_output": "3"},
      {"input": "\"abc\", 'd'", "expected_output": "0"}
    ]
  },
  {
    "id": 16,
    "category": "strings",
    "difficulty": "easy",
    "question": "Given two strings, concatenate them.",
    "testcases": [
      {"input": "\"hello\", \"world\"", "expected_output": "\"helloworld\""},
      {"input": "\"a\", \"b\"", "expected_output": "\"ab\""},
      {"input": "\"\", \"\"", "expected_output": "\"\""},
      {"input": "\"test\", \"\"", "expected_output": "\"test\""},
      {"input": "\"foo\", \"bar\"", "expected_output": "\"foobar\""}
    ]
  },
  {
    "id": 17,
    "category": "strings",
    "difficulty": "easy",
    "question": "Given a string, remove all vowels.",
    "testcases": [
      {"input": "\"hello\"", "expected_output": "\"hll\""},
      {"input": "\"world\"", "expected_output": "\"wrld\""},
      {"input": "\"aeiou\"", "expected_output": "\"\""},
      {"input": "\"a\"", "expected_output": "\"\""},
      {"input": "\"bcd\"", "expected_output": "\"bcd\""}
    ]
  },
  {
    "id": 18,
    "category": "strings",
    "difficulty": "easy",
    "question": "Given a string, check if it contains a substring.",
    "testcases": [
      {"input": "\"hello\", \"ell\"", "expected_output": "true"},
      {"input": "\"world\", \"abc\"", "expected_output": "false"},
      {"input": "\"\", \"\"", "expected_output": "true"},
      {"input": "\"a\", \"a\"", "expected_output": "true"},
      {"input": "\"abc\", \"d\"", "expected_output": "false"}
    ]
  },
  {
    "id": 19,
    "category": "strings",
    "difficulty": "easy",
    "question": "Given a string, replace all spaces with underscores.",
    "testcases": [
      {"input": "\"hello world\"", "expected_output": "\"hello_world\""},
      {"input": "\"no space\"", "expected_output": "\"no_space\""},
      {"input": "\"   \"", "expected_output": "\"___\""},
      {"input": "\"\"", "expected_output": "\"\""},
      {"input": "\"a b c\"", "expected_output": "\"a_b_c\""}
    ]
  },
  {
    "id": 20,
    "category": "strings",
    "difficulty": "easy",
    "question": "Given a string, split it into words.",
    "testcases": [
      {"input": "\"hello world\"", "expected_output": "[\"hello\", \"world\"]"},
      {"input": "\"one\"", "expected_output": "[\"one\"]"},
      {"input": "\"\"", "expected_output": "[]"},
      {"input": "\"a b c\"", "expected_output": "[\"a\", \"b\", \"c\"]"},
      {"input": "\" multiple  spaces \"", "expected_output": "[\"multiple\", \"spaces\"]"}
    ]
  },
  {
    "id": 21,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Given a linked list, return the number of nodes.",
    "testcases": [
      {"input": "1->2->3->null", "expected_output": "3"},
      {"input": "null", "expected_output": "0"},
      {"input": "5->null", "expected_output": "1"},
      {"input": "10->20->30->40->null", "expected_output": "4"},
      {"input": "1->null", "expected_output": "1"}
    ]
  },
  {
    "id": 22,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Given a linked list, find if a value exists in it.",
    "testcases": [
      {"input": "1->2->3->null, value=2", "expected_output": "true"},
      {"input": "null, value=0", "expected_output": "false"},
      {"input": "5->null, value=5", "expected_output": "true"},
      {"input": "10->20->null, value=30", "expected_output": "false"},
      {"input": "1->2->3->4->null, value=4", "expected_output": "true"}
    ]
  },
  {
    "id": 23,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Given a linked list, add a node at the end.",
    "testcases": [
      {"input": "1->2->null, add=3", "expected_output": "1->2->3->null"},
      {"input": "null, add=1", "expected_output": "1->null"},
      {"input": "5->null, add=10", "expected_output": "5->10->null"},
      {"input": "10->20->30->null, add=40", "expected_output": "10->20->30->40->null"},
      {"input": "1->null, add=2", "expected_output": "1->2->null"}
    ]
  },
  {
    "id": 24,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Given a linked list, reverse it.",
    "testcases": [
      {"input": "1->2->3->null", "expected_output": "3->2->1->null"},
      {"input": "null", "expected_output": "null"},
      {"input": "5->null", "expected_output": "5->null"},
      {"input": "10->20->null", "expected_output": "20->10->null"},
      {"input": "1->2->3->4->null", "expected_output": "4->3->2->1->null"}
    ]
  },
  {
    "id": 25,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Given two linked lists, merge them.",
    "testcases": [
      {"input": "1->3->null, 2->4->null", "expected_output": "1->2->3->4->null"},
      {"input": "null, 1->null", "expected_output": "1->null"},
      {"input": "5->null, null", "expected_output": "5->null"},
      {"input": "10->30->null, 20->40->null", "expected_output": "10->20->30->40->null"},
      {"input": "1->2->null, 3->null", "expected_output": "1->2->3->null"}
    ]
  },
  {
    "id": 26,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Given a linked list, remove a node with a given value.",
    "testcases": [
      {"input": "1->2->3->null, remove=2", "expected_output": "1->3->null"},
      {"input": "1->null, remove=1", "expected_output": "null"},
      {"input": "5->5->null, remove=5", "expected_output": "null"},
      {"input": "10->20->30->null, remove=20", "expected_output": "10->30->null"},
      {"input": "1->2->3->null, remove=4", "expected_output": "1->2->3->null"}
    ]
  },
  {
    "id": 27,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Given a linked list, find the middle node.",
    "testcases": [
      {"input": "1->2->3->null", "expected_output": "2"},
      {"input": "null", "expected_output": "null"},
      {"input": "5->null", "expected_output": "5"},
      {"input": "10->20->30->40->null", "expected_output": "30"},
      {"input": "1->2->3->4->5->null", "expected_output": "3"}
    ]
  },
  {
    "id": 28,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Given a linked list, add a node at the beginning.",
    "testcases": [
      {"input": "2->3->null, add=1", "expected_output": "1->2->3->null"},
      {"input": "null, add=1", "expected_output": "1->null"},
      {"input": "5->null, add=0", "expected_output": "0->5->null"},
      {"input": "20->30->null, add=10", "expected_output": "10->20->30->null"},
      {"input": "2->null, add=1", "expected_output": "1->2->null"}
    ]
  },
  {
    "id": 29,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Given a linked list, sum all node values.",
    "testcases": [
      {"input": "1->2->3->null", "expected_output": "6"},
      {"input": "null", "expected_output": "0"},
      {"input": "5->null", "expected_output": "5"},
      {"input": "10->20->30->null", "expected_output": "60"},
      {"input": "-1->1->null", "expected_output": "0"}
    ]
  },
  {
    "id": 30,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Given a linked list, check if it's empty.",
    "testcases": [
      {"input": "1->null", "expected_output": "false"},
      {"input": "null", "expected_output": "true"},
      {"input": "5->6->null", "expected_output": "false"},
      {"input": "null", "expected_output": "true"},
      {"input": "0->null", "expected_output": "false"}
    ]
  },
  {
    "id": 31,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Implement a stack and perform push and pop operations.",
    "testcases": [
      {"input": "push 1, push 2, pop", "expected_output": "2"},
      {"input": "push 10, pop", "expected_output": "10"},
      {"input": "push 5, push 6, pop, pop", "expected_output": "5"},
      {"input": "pop (empty)", "expected_output": "error"},
      {"input": "push 0, push -1, pop", "expected_output": "-1"}
    ]
  },
  {
    "id": 32,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Check if a string of parentheses is balanced using a stack.",
    "testcases": [
      {"input": "\"()\"", "expected_output": "true"},
      {"input": "\"(]\"", "expected_output": "false"},
      {"input": "\"\"", "expected_output": "true"},
      {"input": "\"(()\"", "expected_output": "false"},
      {"input": "\"{[]}\"", "expected_output": "true"}
    ]
  },
  {
    "id": 33,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Reverse a string using a stack.",
    "testcases": [
      {"input": "\"abc\"", "expected_output": "\"cba\""},
      {"input": "\"\"", "expected_output": "\"\""},
      {"input": "\"a\"", "expected_output": "\"a\""},
      {"input": "\"hello\"", "expected_output": "\"olleh\""},
      {"input": "\"123\"", "expected_output": "\"321\""}
    ]
  },
  {
    "id": 34,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Find the top element of the stack without popping.",
    "testcases": [
      {"input": "push 1, push 2, peek", "expected_output": "2"},
      {"input": "push 10, peek", "expected_output": "10"},
      {"input": "peek (empty)", "expected_output": "error"},
      {"input": "push 5, push 6, peek", "expected_output": "6"},
      {"input": "push 0, peek", "expected_output": "0"}
    ]
  },
  {
    "id": 35,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Check if the stack is empty.",
    "testcases": [
      {"input": "empty stack", "expected_output": "true"},
      {"input": "push 1", "expected_output": "false"},
      {"input": "push 1, pop", "expected_output": "true"},
      {"input": "push 5, push 6, pop, pop", "expected_output": "true"},
      {"input": "push 0, pop", "expected_output": "true"}
    ]
  },
  {
    "id": 36,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Implement a stack using an array.",
    "testcases": [
      {"input": "push 1, push 2", "expected_output": "[1,2]"},
      {"input": "push 10", "expected_output": "[10]"},
      {"input": "push 5, pop", "expected_output": "[]"},
      {"input": "push 1, push 2, pop", "expected_output": "[1]"},
      {"input": "push 0", "expected_output": "[0]"}
    ]
  },
  {
    "id": 37,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Convert infix to postfix using a stack.",
    "testcases": [
      {"input": "\"a+b\"", "expected_output": "\"ab+\""},
      {"input": "\"a\"", "expected_output": "\"a\""},
      {"input": "\"(a+b)*c\"", "expected_output": "\"ab+c*\""},
      {"input": "\"a+b-c\"", "expected_output": "\"ab+c-\""},
      {"input": "\"a*(b+c)\"", "expected_output": "\"abc+*\""}
    ]
  },
  {
    "id": 38,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Evaluate postfix expression using a stack.",
    "testcases": [
      {"input": "\"23+\"", "expected_output": "5"},
      {"input": "\"5\"", "expected_output": "5"},
      {"input": "\"12+3*\"", "expected_output": "9"},
      {"input": "\"45*\"", "expected_output": "20"},
      {"input": "\"123*+\"", "expected_output": "7"}
    ]
  },
  {
    "id": 39,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Find the size of the stack.",
    "testcases": [
      {"input": "push 1, push 2", "expected_output": "2"},
      {"input": "empty", "expected_output": "0"},
      {"input": "push 5, pop", "expected_output": "0"},
      {"input": "push 1", "expected_output": "1"},
      {"input": "push 0, push -1, pop", "expected_output": "1"}
    ]
  },
  {
    "id": 40,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Implement two stacks in one array.",
    "testcases": [
      {"input": "stack1 push 1, stack2 push 2", "expected_output": "stack1:1, stack2:2"},
      {"input": "stack1 push 10", "expected_output": "stack1:10"},
      {"input": "stack2 push 5", "expected_output": "stack2:5"},
      {"input": "stack1 push 1, stack1 pop", "expected_output": "stack1 empty"},
      {"input": "stack2 push 0, stack2 peek", "expected_output": "0"}
    ]
  },
  {
    "id": 41,
    "category": "queues",
    "difficulty": "easy",
    "question": "Implement a queue and perform enqueue and dequeue.",
    "testcases": [
      {"input": "enqueue 1, enqueue 2, dequeue", "expected_output": "1"},
      {"input": "enqueue 10, dequeue", "expected_output": "10"},
      {"input": "dequeue (empty)", "expected_output": "error"},
      {"input": "enqueue 5, enqueue 6, dequeue", "expected_output": "5"},
      {"input": "enqueue 0", "expected_output": "queue: [0]"}
    ]
  },
  {
    "id": 42,
    "category": "queues",
    "difficulty": "easy",
    "question": "Check if the queue is empty.",
    "testcases": [
      {"input": "empty queue", "expected_output": "true"},
      {"input": "enqueue 1", "expected_output": "false"},
      {"input": "enqueue 1, dequeue", "expected_output": "true"},
      {"input": "enqueue 5, enqueue 6, dequeue, dequeue", "expected_output": "true"},
      {"input": "enqueue 0, dequeue", "expected_output": "true"}
    ]
  },
  {
    "id": 43,
    "category": "queues",
    "difficulty": "easy",
    "question": "Find the front element of the queue.",
    "testcases": [
      {"input": "enqueue 1, enqueue 2, front", "expected_output": "1"},
      {"input": "enqueue 10, front", "expected_output": "10"},
      {"input": "front (empty)", "expected_output": "error"},
      {"input": "enqueue 5, enqueue 6, front", "expected_output": "5"},
      {"input": "enqueue 0, front", "expected_output": "0"}
    ]
  },
  {
    "id": 44,
    "category": "queues",
    "difficulty": "easy",
    "question": "Implement a queue using two stacks.",
    "testcases": [
      {"input": "enqueue 1, enqueue 2, dequeue", "expected_output": "1"},
      {"input": "enqueue 10, dequeue", "expected_output": "10"},
      {"input": "enqueue 5, dequeue", "expected_output": "5"},
      {"input": "enqueue 1, enqueue 2, enqueue 3, dequeue", "expected_output": "1"},
      {"input": "enqueue 0, dequeue", "expected_output": "0"}
    ]
  },
  {
    "id": 45,
    "category": "queues",
    "difficulty": "easy",
    "question": "Find the size of the queue.",
    "testcases": [
      {"input": "enqueue 1, enqueue 2", "expected_output": "2"},
      {"input": "empty", "expected_output": "0"},
      {"input": "enqueue 5, dequeue", "expected_output": "0"},
      {"input": "enqueue 1", "expected_output": "1"},
      {"input": "enqueue 0, enqueue -1, dequeue", "expected_output": "1"}
    ]
  },
  {
    "id": 46,
    "category": "queues",
    "difficulty": "easy",
    "question": "Implement a circular queue.",
    "testcases": [
      {"input": "enqueue 1, enqueue 2, dequeue", "expected_output": "1"},
      {"input": "enqueue 10, dequeue", "expected_output": "10"},
      {"input": "enqueue 5, enqueue 6, dequeue", "expected_output": "5"},
      {"input": "enqueue 1, dequeue, enqueue 2", "expected_output": "queue: [2]"},
      {"input": "enqueue 0", "expected_output": "queue: [0]"}
    ]
  },
  {
    "id": 47,
    "category": "queues",
    "difficulty": "easy",
    "question": "Reverse a queue.",
    "testcases": [
      {"input": "enqueue 1, enqueue 2, enqueue 3, reverse", "expected_output": "3,2,1"},
      {"input": "enqueue 10, reverse", "expected_output": "10"},
      {"input": "empty, reverse", "expected_output": "empty"},
      {"input": "enqueue 5, enqueue 6, reverse", "expected_output": "6,5"},
      {"input": "enqueue 0, enqueue 1, reverse", "expected_output": "1,0"}
    ]
  },
  {
    "id": 48,
    "category": "queues",
    "difficulty": "easy",
    "question": "Implement priority queue using heap.",
    "testcases": [
      {"input": "insert 1, insert 2, extract_min", "expected_output": "1"},
      {"input": "insert 10", "expected_output": "10 (min)"},
      {"input": "insert 5, insert 3, extract_min", "expected_output": "3"},
      {"input": "insert 4, insert 2, extract_min", "expected_output": "2"},
      {"input": "insert 0", "expected_output": "0"}
    ]
  },
  {
    "id": 49,
    "category": "queues",
    "difficulty": "easy",
    "question": "Find the rear element of the queue.",
    "testcases": [
      {"input": "enqueue 1, enqueue 2, rear", "expected_output": "2"},
      {"input": "enqueue 10, rear", "expected_output": "10"},
      {"input": "rear (empty)", "expected_output": "error"},
      {"input": "enqueue 5, enqueue 6, rear", "expected_output": "6"},
      {"input": "enqueue 0, rear", "expected_output": "0"}
    ]
  },
  {
    "id": 50,
    "category": "queues",
    "difficulty": "easy",
    "question": "Implement deque (double-ended queue).",
    "testcases": [
      {"input": "add_front 1, add_rear 2, remove_front", "expected_output": "1"},
      {"input": "add_rear 10, remove_rear", "expected_output": "10"},
      {"input": "add_front 5, add_front 6, remove_rear", "expected_output": "5"},
      {"input": "add_rear 1, add_front 2, remove_front", "expected_output": "2"},
      {"input": "add_front 0, remove_front", "expected_output": "0"}
    ]
  }
,
  {
    "id": 51,
    "category": "heaps",
    "difficulty": "easy",
    "question": "Build a min-heap from an array.",
    "testcases": [
      {"input": "[3,1,4,1,5]", "expected_output": "[1,1,4,3,5]"},
      {"input": "[10,20,30]", "expected_output": "[10,20,30]"},
      {"input": "[5]", "expected_output": "[5]"},
      {"input": "[]", "expected_output": "[]"},
      {"input": "[2,4,6]", "expected_output": "[2,4,6]"}
    ]
  },
  {
    "id": 52,
    "category": "heaps",
    "difficulty": "easy",
    "question": "Insert an element into a min-heap.",
    "testcases": [
      {"input": "heap=[1,3,5], insert=2", "expected_output": "[1,2,5,3]"},
      {"input": "heap=[10], insert=5", "expected_output": "[5,10]"},
      {"input": "heap=[], insert=1", "expected_output": "[1]"},
      {"input": "heap=[3,4,5], insert=1", "expected_output": "[1,3,5,4]"},
      {"input": "heap=[0,1,2], insert=-1", "expected_output": "[-1,0,2,1]"}
    ]
  },
  {
    "id": 53,
    "category": "heaps",
    "difficulty": "easy",
    "question": "Extract the minimum from a min-heap.",
    "testcases": [
      {"input": "[1,2,3]", "expected_output": "1, heap=[2,3]"},
      {"input": "[5]", "expected_output": "5, heap=[]"},
      {"input": "[10,20,30]", "expected_output": "10, heap=[20,30]"},
      {"input": "[1]", "expected_output": "1, heap=[]"},
      {"input": "[0,1,2]", "expected_output": "0, heap=[1,2]"}
    ]
  },
  {
    "id": 54,
    "category": "heaps",
    "difficulty": "easy",
    "question": "Check if a heap is empty.",
    "testcases": [
      {"input": "[]", "expected_output": "true"},
      {"input": "[1]", "expected_output": "false"},
      {"input": "[1,2,3], extract min thrice", "expected_output": "true"},
      {"input": "[5,6]", "expected_output": "false"},
      {"input": "empty after operations", "expected_output": "true"}
    ]
  },
  {
    "id": 55,
    "category": "heaps",
    "difficulty": "easy",
    "question": "Find the size of the heap.",
    "testcases": [
      {"input": "[1,2,3]", "expected_output": "3"},
      {"input": "[]", "expected_output": "0"},
      {"input": "[5]", "expected_output": "1"},
      {"input": "[10,20,30,40]", "expected_output": "4"},
      {"input": "[0]", "expected_output": "1"}
    ]
  },
  {
    "id": 56,
    "category": "heaps",
    "difficulty": "easy",
    "question": "Build a max-heap from an array.",
    "testcases": [
      {"input": "[1,3,5,7]", "expected_output": "[7,5,3,1]"},
      {"input": "[10,20]", "expected_output": "[20,10]"},
      {"input": "[5]", "expected_output": "[5]"},
      {"input": "[]", "expected_output": "[]"},
      {"input": "[2,4,6]", "expected_output": "[6,4,2]"}
    ]
  },
  {
    "id": 57,
    "category": "heaps",
    "difficulty": "easy",
    "question": "Insert into a max-heap.",
    "testcases": [
      {"input": "heap=[5,3,1], insert=7", "expected_output": "[7,5,1,3]"},
      {"input": "heap=[10], insert=20", "expected_output": "[20,10]"},
      {"input": "heap=[], insert=1", "expected_output": "[1]"},
      {"input": "heap=[4,3,2], insert=5", "expected_output": "[5,4,2,3]"},
      {"input": "heap=[2,1,0], insert=3", "expected_output": "[3,2,0,1]"}
    ]
  },
  {
    "id": 58,
    "category": "heaps",
    "difficulty": "easy",
    "question": "Extract max from max-heap.",
    "testcases": [
      {"input": "[5,3,1]", "expected_output": "5, heap=[3,1]"},
      {"input": "[10]", "expected_output": "10, heap=[]"},
      {"input": "[30,20,10]", "expected_output": "30, heap=[20,10]"},
      {"input": "[1]", "expected_output": "1, heap=[]"},
      {"input": "[2,1,0]", "expected_output": "2, heap=[1,0]"}
    ]
  },
  {
    "id": 59,
    "category": "heaps",
    "difficulty": "easy",
    "question": "Heapify an array.",
    "testcases": [
      {"input": "[4,1,3,2,16,9,10,14,8,7]", "expected_output": "max-heap built"},
      {"input": "[1,2,3]", "expected_output": "heap"},
      {"input": "[5]", "expected_output": "heap"},
      {"input": "[]", "expected_output": "heap"},
      {"input": "[0, -1]", "expected_output": "heap"}
    ]
  },
  {
    "id": 60,
    "category": "heaps",
    "difficulty": "easy",
    "question": "Peek the min in min-heap.",
    "testcases": [
      {"input": "[1,2,3]", "expected_output": "1"},
      {"input": "[5]", "expected_output": "5"},
      {"input": "empty", "expected_output": "error"},
      {"input": "[10,20]", "expected_output": "10"},
      {"input": "[0,1]", "expected_output": "0"}
    ]
  },
  {
    "id": 61,
    "category": "trees",
    "difficulty": "easy",
    "question": "Find the height of a binary tree.",
    "testcases": [
      {"input": "root=1,left=2,right=3", "expected_output": "2"},
      {"input": "null", "expected_output": "0"},
      {"input": "root=5", "expected_output": "1"},
      {"input": "root=10,left=20,right=30,leftOf20=40", "expected_output": "3"},
      {"input": "root=1,right=2,rightOf2=3", "expected_output": "3"}
    ]
  },
  {
    "id": 62,
    "category": "trees",
    "difficulty": "easy",
    "question": "Perform inorder traversal of a binary tree.",
    "testcases": [
      {"input": "root=1,left=2,right=3", "expected_output": "[2,1,3]"},
      {"input": "null", "expected_output": "[]"},
      {"input": "root=5", "expected_output": "[5]"},
      {"input": "root=10,left=5,right=15", "expected_output": "[5,10,15]"},
      {"input": "root=1,left=3,right=2", "expected_output": "[3,1,2]"}
    ]
  },
  {
    "id": 63,
    "category": "trees",
    "difficulty": "easy",
    "question": "Perform preorder traversal.",
    "testcases": [
      {"input": "root=1,left=2,right=3", "expected_output": "[1,2,3]"},
      {"input": "null", "expected_output": "[]"},
      {"input": "root=5", "expected_output": "[5]"},
      {"input": "root=10,left=5,right=15", "expected_output": "[10,5,15]"},
      {"input": "root=1,left=3,right=2", "expected_output": "[1,3,2]"}
    ]
  },
  {
    "id": 64,
    "category": "trees",
    "difficulty": "easy",
    "question": "Perform postorder traversal.",
    "testcases": [
      {"input": "root=1,left=2,right=3", "expected_output": "[2,3,1]"},
      {"input": "null", "expected_output": "[]"},
      {"input": "root=5", "expected_output": "[5]"},
      {"input": "root=10,left=5,right=15", "expected_output": "[5,15,10]"},
      {"input": "root=1,left=3,right=2", "expected_output": "[3,2,1]"}
    ]
  },
  {
    "id": 65,
    "category": "trees",
    "difficulty": "easy",
    "question": "Check if a binary tree is balanced.",
    "testcases": [
      {"input": "root=1,left=2,right=3", "expected_output": "true"},
      {"input": "root=1,left=2,leftOf2=4", "expected_output": "false"},
      {"input": "null", "expected_output": "true"},
      {"input": "root=5", "expected_output": "true"},
      {"input": "root=10,left=5,right=15,leftOf5=20", "expected_output": "false"}
    ]
  },
  {
    "id": 66,
    "category": "trees",
    "difficulty": "easy",
    "question": "Find the maximum value in a binary tree.",
    "testcases": [
      {"input": "root=1,left=2,right=3", "expected_output": "3"},
      {"input": "null", "expected_output": "null"},
      {"input": "root=5", "expected_output": "5"},
      {"input": "root=10,left=20,right=5", "expected_output": "20"},
      {"input": "root=0,left=-1,right=1", "expected_output": "1"}
    ]
  },
  {
    "id": 67,
    "category": "trees",
    "difficulty": "easy",
    "question": "Count the number of leaves in a binary tree.",
    "testcases": [
      {"input": "root=1,left=2,right=3", "expected_output": "2"},
      {"input": "null", "expected_output": "0"},
      {"input": "root=5", "expected_output": "1"},
      {"input": "root=10,left=20", "expected_output": "1"},
      {"input": "root=1,left=2,leftOf2=4,rightOf2=5", "expected_output": "3"}
    ]
  },
  {
    "id": 68,
    "category": "trees",
    "difficulty": "easy",
    "question": "Check if two binary trees are identical.",
    "testcases": [
      {"input": "tree1=1-2-3, tree2=1-2-3", "expected_output": "true"},
      {"input": "tree1=null, tree2=null", "expected_output": "true"},
      {"input": "tree1=5, tree2=5", "expected_output": "true"},
      {"input": "tree1=10-5, tree2=10-6", "expected_output": "false"},
      {"input": "tree1=1-2, tree2=1-null-2", "expected_output": "false"}
    ]
  },
  {
    "id": 69,
    "category": "trees",
    "difficulty": "easy",
    "question": "Find the diameter of a binary tree.",
    "testcases": [
      {"input": "root=1,left=2,right=3", "expected_output": "3"},
      {"input": "null", "expected_output": "0"},
      {"input": "root=5", "expected_output": "1"},
      {"input": "root=1,left=2,leftOf2=4", "expected_output": "3"},
      {"input": "root=10,left=20,right=30,leftOf20=40,rightOf20=50", "expected_output": "4"}
    ]
  },
  {
    "id": 70,
    "category": "trees",
    "difficulty": "easy",
    "question": "Level order traversal of binary tree.",
    "testcases": [
      {"input": "root=1,left=2,right=3", "expected_output": "[[1],[2,3]]"},
      {"input": "null", "expected_output": "[]"},
      {"input": "root=5", "expected_output": "[[5]]"},
      {"input": "root=10,left=5,right=15", "expected_output": "[[10],[5,15]]"},
      {"input": "root=1,left=2,right=3,leftOf2=4", "expected_output": "[[1],[2,3],[4]]"}
    ]
  },
  {
    "id": 71,
    "category": "graphs",
    "difficulty": "easy",
    "question": "Find if a path exists between two nodes in an undirected graph.",
    "testcases": [
      {"input": "nodes=1-2,3-4, path 1 to 2", "expected_output": "true"},
      {"input": "nodes=1, path 1 to 1", "expected_output": "true"},
      {"input": "empty graph, path a to b", "expected_output": "false"},
      {"input": "nodes=1-2-3, path 1 to 3", "expected_output": "true"},
      {"input": "nodes=1-2,3, path 1 to 3", "expected_output": "false"}
    ]
  },
  {
    "id": 72,
    "category": "graphs",
    "difficulty": "easy",
    "question": "Perform BFS on a graph.",
    "testcases": [
      {"input": "graph=1:2,3;2:1;3:1, start=1", "expected_output": "[1,2,3]"},
      {"input": "graph=empty, start=a", "expected_output": "[]"},
      {"input": "graph=5: , start=5", "expected_output": "[5]"},
      {"input": "graph=10:20,30;20:10;30:10, start=10", "expected_output": "[10,20,30]"},
      {"input": "graph=1:2;2:1,3;3:2, start=1", "expected_output": "[1,2,3]"}
    ]
  },
  {
    "id": 73,
    "category": "graphs",
    "difficulty": "easy",
    "question": "Perform DFS on a graph.",
    "testcases": [
      {"input": "graph=1:2,3;2:1;3:1, start=1", "expected_output": "[1,2,3]"},
      {"input": "graph=empty, start=a", "expected_output": "[]"},
      {"input": "graph=5: , start=5", "expected_output": "[5]"},
      {"input": "graph=10:20,30;20:10;30:10, start=10", "expected_output": "[10,20,30]"},
      {"input": "graph=1:2;2:1,3;3:2, start=1", "expected_output": "[1,2,3]"}
    ]
  },
  {
    "id": 74,
    "category": "graphs",
    "difficulty": "easy",
    "question": "Count the number of connected components in an undirected graph.",
    "testcases": [
      {"input": "graph=1-2,3-4", "expected_output": "2"},
      {"input": "empty", "expected_output": "0"},
      {"input": "graph=5", "expected_output": "1"},
      {"input": "graph=10-20,30", "expected_output": "2"},
      {"input": "graph=1-2-3", "expected_output": "1"}
    ]
  },
  {
    "id": 75,
    "category": "graphs",
    "difficulty": "easy",
    "question": "Check if a graph is bipartite.",
    "testcases": [
      {"input": "graph=1-2,2-3,3-1", "expected_output": "false"},
      {"input": "graph=1-2,3-4", "expected_output": "true"},
      {"input": "empty", "expected_output": "true"},
      {"input": "graph=5", "expected_output": "true"},
      {"input": "graph=10-20", "expected_output": "true"}
    ]
  },
  {
    "id": 76,
    "category": "graphs",
    "difficulty": "easy",
    "question": "Find the degree of a node in a graph.",
    "testcases": [
      {"input": "graph=1:2,3; node=1", "expected_output": "2"},
      {"input": "graph=empty; node=a", "expected_output": "0"},
      {"input": "graph=5:; node=5", "expected_output": "0"},
      {"input": "graph=10:20,30,40; node=10", "expected_output": "3"},
      {"input": "graph=1:2;2:1,3; node=2", "expected_output": "2"}
    ]
  },
  {
    "id": 77,
    "category": "graphs",
    "difficulty": "easy",
    "question": "Detect a cycle in an undirected graph.",
    "testcases": [
      {"input": "graph=1-2-3-1", "expected_output": "true"},
      {"input": "graph=1-2,3-4", "expected_output": "false"},
      {"input": "empty", "expected_output": "false"},
      {"input": "graph=5", "expected_output": "false"},
      {"input": "graph=10-20-10", "expected_output": "true"}
    ]
  },
  {
    "id": 78,
    "category": "graphs",
    "difficulty": "easy",
    "question": "Find shortest path in unweighted graph using BFS.",
    "testcases": [
      {"input": "graph=1-2-3, start=1, end=3", "expected_output": "2"},
      {"input": "graph=1, start=1, end=1", "expected_output": "0"},
      {"input": "graph=1-2,3-4, start=1, end=3", "expected_output": "-1"},
      {"input": "graph=5-6-7, start=5, end=7", "expected_output": "2"},
      {"input": "graph=10-20, start=10, end=20", "expected_output": "1"}
    ]
  },
  {
    "id": 79,
    "category": "graphs",
    "difficulty": "easy",
    "question": "Implement adjacency list for a graph.",
    "testcases": [
      {"input": "add edge 1-2, 1-3", "expected_output": "1:[2,3]"},
      {"input": "empty", "expected_output": "{}"},
      {"input": "add 5-6", "expected_output": "5:[6],6:[5]"},
      {"input": "add 10-20,20-30", "expected_output": "10:[20],20:[10,30],30:[20]"},
      {"input": "add 1-1 (self)", "expected_output": "1:[1]"}
    ]
  },
  {
    "id": 80,
    "category": "graphs",
    "difficulty": "easy",
    "question": "Check if graph is connected.",
    "testcases": [
      {"input": "graph=1-2-3", "expected_output": "true"},
      {"input": "graph=1-2,3-4", "expected_output": "false"},
      {"input": "empty", "expected_output": "true"},
      {"input": "graph=5", "expected_output": "true"},
      {"input": "graph=10", "expected_output": "true"}
    ]
  },
  {
    "id": 81,
    "category": "sorting",
    "difficulty": "easy",
    "question": "Sort an array using bubble sort.",
    "testcases": [
      {"input": "[5,3,8,4,2]", "expected_output": "[2,3,4,5,8]"},
      {"input": "[1]", "expected_output": "[1]"},
      {"input": "[]", "expected_output": "[]"},
      {"input": "[10,20,30]", "expected_output": "[10,20,30]"},
      {"input": "[-1,0,1]", "expected_output": "[-1,0,1]"}
    ]
  },
  {
    "id": 82,
    "category": "sorting",
    "difficulty": "easy",
    "question": "Sort an array using selection sort.",
    "testcases": [
      {"input": "[64,25,12,22,11]", "expected_output": "[11,12,22,25,64]"},
      {"input": "[1,2]", "expected_output": "[1,2]"},
      {"input": "[0]", "expected_output": "[0]"},
      {"input": "[5,4,3,2,1]", "expected_output": "[1,2,3,4,5]"},
      {"input": "[10, -10]", "expected_output": "[-10,10]"}
    ]
  },
  {
    "id": 83,
    "category": "sorting",
    "difficulty": "easy",
    "question": "Sort an array using insertion sort.",
    "testcases": [
      {"input": "[12,11,13,5,6]", "expected_output": "[5,6,11,12,13]"},
      {"input": "[3,1]", "expected_output": "[1,3]"},
      {"input": "[]", "expected_output": "[]"},
      {"input": "[1,2,3]", "expected_output": "[1,2,3]"},
      {"input": "[0, -5, 10]", "expected_output": "[-5,0,10]"}
    ]
  },
  {
    "id": 84,
    "category": "sorting",
    "difficulty": "easy",
    "question": "Merge two sorted arrays.",
    "testcases": [
      {"input": "[1,3,5],[2,4,6]", "expected_output": "[1,2,3,4,5,6]"},
      {"input": "[],[1,2]", "expected_output": "[1,2]"},
      {"input": "[5],[]", "expected_output": "[5]"},
      {"input": "[10,20],[15]", "expected_output": "[10,15,20]"},
      {"input": "[-1,1],[0]", "expected_output": "[-1,0,1]"}
    ]
  },
  {
    "id": 85,
    "category": "sorting",
    "difficulty": "easy",
    "question": "Sort an array of 0s, 1s, 2s (Dutch National Flag).",
    "testcases": [
      {"input": "[0,1,2,0,1,2]", "expected_output": "[0,0,1,1,2,2]"},
      {"input": "[1,0]", "expected_output": "[0,1]"},
      {"input": "[2]", "expected_output": "[2]"},
      {"input": "[0,2,1,2,0]", "expected_output": "[0,0,1,2,2]"},
      {"input": "[1,1,1]", "expected_output": "[1,1,1]"}
    ]
  },
  {
    "id": 86,
    "category": "sorting",
    "difficulty": "easy",
    "question": "Find kth smallest element using quickselect.",
    "testcases": [
      {"input": "[3,2,1,5,6,4], k=2", "expected_output": "2"},
      {"input": "[1], k=1", "expected_output": "1"},
      {"input": "[5,4,3,2,1], k=3", "expected_output": "3"},
      {"input": "[10,20,30], k=1", "expected_output": "10"},
      {"input": "[0,-1,1], k=2", "expected_output": "0"}
    ]
  },
  {
    "id": 87,
    "category": "sorting",
    "difficulty": "easy",
    "question": "Sort strings in lexicographical order.",
    "testcases": [
      {"input": "[\"apple\",\"banana\",\"cherry\"]", "expected_output": "[\"apple\",\"banana\",\"cherry\"]"},
      {"input": "[\"dog\",\"cat\"]", "expected_output": "[\"cat\",\"dog\"]"},
      {"input": "[]", "expected_output": "[]"},
      {"input": "[\"a\"]", "expected_output": "[\"a\"]"},
      {"input": "[\"aa\",\"a\"]", "expected_output": "[\"a\",\"aa\"]"}
    ]
  },
  {
    "id": 88,
    "category": "sorting",
    "difficulty": "easy",
    "question": "Count sort for small range integers.",
    "testcases": [
      {"input": "[1,3,2,3,1]", "expected_output": "[1,1,2,3,3]"},
      {"input": "[5]", "expected_output": "[5]"},
      {"input": "[]", "expected_output": "[]"},
      {"input": "[0,0,0]", "expected_output": "[0,0,0]"},
      {"input": "[4,2,2,8,3]", "expected_output": "[2,2,3,4,8]"}
    ]
  },
  {
    "id": 89,
    "category": "sorting",
    "difficulty": "easy",
    "question": "Radix sort for integers.",
    "testcases": [
      {"input": "[170,45,75,90,802,24,2,66]", "expected_output": "[2,24,45,66,75,90,170,802]"},
      {"input": "[1,10,100]", "expected_output": "[1,10,100]"},
      {"input": "[]", "expected_output": "[]"},
      {"input": "[5]", "expected_output": "[5]"},
      {"input": "[999,100,10]", "expected_output": "[10,100,999]"}
    ]
  },
  {
    "id": 90,
    "category": "sorting",
    "difficulty": "easy",
    "question": "Bucket sort for floating points.",
    "testcases": [
      {"input": "[0.42,0.32,0.33,0.52,0.37]", "expected_output": "[0.32,0.33,0.37,0.42,0.52]"},
      {"input": "[0.1,0.2]", "expected_output": "[0.1,0.2]"},
      {"input": "[]", "expected_output": "[]"},
      {"input": "[0.5]", "expected_output": "[0.5]"},
      {"input": "[0.9,0.1,0.5]", "expected_output": "[0.1,0.5,0.9]"}
    ]
  },
  {
    "id": 91,
    "category": "searching",
    "difficulty": "easy",
    "question": "Perform linear search in an array.",
    "testcases": [
      {"input": "[1,2,3,4,5], target=3", "expected_output": "2"},
      {"input": "[10], target=10", "expected_output": "0"},
      {"input": "[], target=1", "expected_output": "-1"},
      {"input": "[5,6,7], target=8", "expected_output": "-1"},
      {"input": "[0,1,2], target=0", "expected_output": "0"}
    ]
  },
  {
    "id": 92,
    "category": "searching",
    "difficulty": "easy",
    "question": "Perform binary search in a sorted array.",
    "testcases": [
      {"input": "[1,2,3,4,5], target=3", "expected_output": "2"},
      {"input": "[10,20,30], target=20", "expected_output": "1"},
      {"input": "[], target=1", "expected_output": "-1"},
      {"input": "[5], target=5", "expected_output": "0"},
      {"input": "[0,1,2,3], target=4", "expected_output": "-1"}
    ]
  },
  {
    "id": 93,
    "category": "searching",
    "difficulty": "easy",
    "question": "Find first occurrence in sorted array with duplicates.",
    "testcases": [
      {"input": "[1,2,2,3], target=2", "expected_output": "1"},
      {"input": "[10,10,10], target=10", "expected_output": "0"},
      {"input": "[5,6,7], target=6", "expected_output": "1"},
      {"input": "[1,3,5], target=2", "expected_output": "-1"},
      {"input": "[0], target=0", "expected_output": "0"}
    ]
  },
  {
    "id": 94,
    "category": "searching",
    "difficulty": "easy",
    "question": "Find last occurrence in sorted array with duplicates.",
    "testcases": [
      {"input": "[1,2,2,3], target=2", "expected_output": "2"},
      {"input": "[10,10,10], target=10", "expected_output": "2"},
      {"input": "[5,6,7], target=6", "expected_output": "1"},
      {"input": "[1,3,5], target=2", "expected_output": "-1"},
      {"input": "[0], target=0", "expected_output": "0"}
    ]
  },
  {
    "id": 95,
    "category": "searching",
    "difficulty": "easy",
    "question": "Search in a rotated sorted array.",
    "testcases": [
      {"input": "[4,5,6,7,0,1,2], target=0", "expected_output": "4"},
      {"input": "[4,5,6,7,0,1,2], target=3", "expected_output": "-1"},
      {"input": "[1], target=1", "expected_output": "0"},
      {"input": "[5,1,3], target=3", "expected_output": "2"},
      {"input": "[3,1], target=1", "expected_output": "1"}
    ]
  },
  {
    "id": 96,
    "category": "searching",
    "difficulty": "easy",
    "question": "Find square root using binary search.",
    "testcases": [
      {"input": "16", "expected_output": "4"},
      {"input": "1", "expected_output": "1"},
      {"input": "0", "expected_output": "0"},
      {"input": "25", "expected_output": "5"},
      {"input": "2", "expected_output": "1"}
    ]
  },
  {
    "id": 97,
    "category": "searching",
    "difficulty": "easy",
    "question": "Find peak element in an array.",
    "testcases": [
      {"input": "[1,2,3,1]", "expected_output": "3"},
      {"input": "[1,2,1,3,5,6,4]", "expected_output": "6"},
      {"input": "[1]", "expected_output": "1"},
      {"input": "[5,4,3]", "expected_output": "5"},
      {"input": "[1,3,2]", "expected_output": "3"}
    ]
  },
  {
    "id": 98,
    "category": "searching",
    "difficulty": "easy",
    "question": "Search in a 2D sorted matrix.",
    "testcases": [
      {"input": "[[1,3,5],[7,9,11],[13,15,17]], target=9", "expected_output": "true"},
      {"input": "[[1]], target=1", "expected_output": "true"},
      {"input": "[], target=0", "expected_output": "false"},
      {"input": "[[1,2],[3,4]], target=5", "expected_output": "false"},
      {"input": "[[0,1,2]], target=1", "expected_output": "true"}
    ]
  },
  {
    "id": 99,
    "category": "searching",
    "difficulty": "easy",
    "question": "Find minimum in rotated sorted array.",
    "testcases": [
      {"input": "[3,4,5,1,2]", "expected_output": "1"},
      {"input": "[4,5,6,7,0,1,2]", "expected_output": "0"},
      {"input": "[1]", "expected_output": "1"},
      {"input": "[2,1]", "expected_output": "1"},
      {"input": "[5,1,2,3,4]", "expected_output": "1"}
    ]
  },
  {
    "id": 100,
    "category": "searching",
    "difficulty": "easy",
    "question": "Count occurrences in sorted array.",
    "testcases": [
      {"input": "[1,1,2,2,2,3], target=2", "expected_output": "3"},
      {"input": "[5], target=5", "expected_output": "1"},
      {"input": "[], target=0", "expected_output": "0"},
      {"input": "[1,2,3], target=4", "expected_output": "0"},
      {"input": "[0,0,0], target=0", "expected_output": "3"}
    ]
  }
,
  {
    "id": 101,
    "category": "dynamic programming",
    "difficulty": "easy",
    "question": "Compute nth Fibonacci number using DP.",
    "testcases": [
      {"input": "5", "expected_output": "5"},
      {"input": "0", "expected_output": "0"},
      {"input": "1", "expected_output": "1"},
      {"input": "10", "expected_output": "55"},
      {"input": "2", "expected_output": "1"}
    ]
  },
  {
    "id": 102,
    "category": "dynamic programming",
    "difficulty": "easy",
    "question": "Find maximum sum subarray (Kadane's algorithm).",
    "testcases": [
      {"input": "[-2,1,-3,4,-1,2,1,-5,4]", "expected_output": "6"},
      {"input": "[1]", "expected_output": "1"},
      {"input": "[-1,-2,-3]", "expected_output": "-1"},
      {"input": "[5,4,-1,7,8]", "expected_output": "23"},
      {"input": "[0]", "expected_output": "0"}
    ]
  },
  {
    "id": 103,
    "category": "dynamic programming",
    "difficulty": "easy",
    "question": "Climbing stairs problem.",
    "testcases": [
      {"input": "3", "expected_output": "3"},
      {"input": "1", "expected_output": "1"},
      {"input": "0", "expected_output": "1"},
      {"input": "4", "expected_output": "5"},
      {"input": "2", "expected_output": "2"}
    ]
  },
  {
    "id": 104,
    "category": "dynamic programming",
    "difficulty": "easy",
    "question": "Minimum cost climbing stairs.",
    "testcases": [
      {"input": "[10,15,20]", "expected_output": "15"},
      {"input": "[1,100,1,1,1,100,1,1,100,1]", "expected_output": "6"},
      {"input": "[0,1]", "expected_output": "0"},
      {"input": "[5]", "expected_output": "0"},
      {"input": "[10,20]", "expected_output": "10"}
    ]
  },
  {
    "id": 105,
    "category": "dynamic programming",
    "difficulty": "easy",
    "question": "House robber problem.",
    "testcases": [
      {"input": "[1,2,3,1]", "expected_output": "4"},
      {"input": "[2,7,9,3,1]", "expected_output": "12"},
      {"input": "[0]", "expected_output": "0"},
      {"input": "[5]", "expected_output": "5"},
      {"input": "[1,2]", "expected_output": "2"}
    ]
  },
  {
    "id": 106,
    "category": "dynamic programming",
    "difficulty": "easy",
    "question": "Maximum product subarray.",
    "testcases": [
      {"input": "[2,3,-2,4]", "expected_output": "6"},
      {"input": "[-2,0,-1]", "expected_output": "0"},
      {"input": "[1]", "expected_output": "1"},
      {"input": "[5, -1, 2]", "expected_output": "5"},
      {"input": "[0]", "expected_output": "0"}
    ]
  },
  {
    "id": 107,
    "category": "dynamic programming",
    "difficulty": "easy",
    "question": "Longest increasing subsequence (length).",
    "testcases": [
      {"input": "[10,9,2,5,3,7,101,18]", "expected_output": "4"},
      {"input": "[1,3,2,4]", "expected_output": "3"},
      {"input": "[5]", "expected_output": "1"},
      {"input": "[]", "expected_output": "0"},
      {"input": "[1,2,3,4]", "expected_output": "4"}
    ]
  },
  {
    "id": 108,
    "category": "dynamic programming",
    "difficulty": "easy",
    "question": "Coin change (number of ways).",
    "testcases": [
      {"input": "amount=5, coins=[1,2,5]", "expected_output": "4"},
      {"input": "amount=0, coins=[1]", "expected_output": "1"},
      {"input": "amount=3, coins=[2]", "expected_output": "0"},
      {"input": "amount=10, coins=[10]", "expected_output": "1"},
      {"input": "amount=1, coins=[1]", "expected_output": "1"}
    ]
  },
  {
    "id": 109,
    "category": "dynamic programming",
    "difficulty": "easy",
    "question": "0/1 Knapsack (maximum value).",
    "testcases": [
      {"input": "weights=[1,3,4], values=[1,4,5], capacity=7", "expected_output": "9"},
      {"input": "weights=[1], values=[1], capacity=0", "expected_output": "0"},
      {"input": "weights=[], values=[], capacity=5", "expected_output": "0"},
      {"input": "weights=[2,3], values=[6,7], capacity=4", "expected_output": "7"},
      {"input": "weights=[5], values=[10], capacity=5", "expected_output": "10"}
    ]
  },
  {
    "id": 110,
    "category": "dynamic programming",
    "difficulty": "easy",
    "question": "Partition equal subset sum.",
    "testcases": [
      {"input": "[1,5,11,5]", "expected_output": "true"},
      {"input": "[1,2,3,5]", "expected_output": "false"},
      {"input": "[2]", "expected_output": "false"},
      {"input": "[]", "expected_output": "true"},
      {"input": "[1,1]", "expected_output": "true"}
    ]
  },
  {
    "id": 111,
    "category": "hash tables",
    "difficulty": "easy",
    "question": "Check if two strings are anagrams using hash table.",
    "testcases": [
      {"input": "\"anagram\",\"nagaram\"", "expected_output": "true"},
      {"input": "\"rat\",\"car\"", "expected_output": "false"},
      {"input": "\"\",\"\"", "expected_output": "true"},
      {"input": "\"a\",\"a\"", "expected_output": "true"},
      {"input": "\"ab\",\"ba\"", "expected_output": "true"}
    ]
  },
  {
    "id": 112,
    "category": "hash tables",
    "difficulty": "easy",
    "question": "Find first non-repeating character.",
    "testcases": [
      {"input": "\"leetcode\"", "expected_output": "l"},
      {"input": "\"loveleetcode\"", "expected_output": "v"},
      {"input": "\"aabb\"", "expected_output": ""},
      {"input": "\"abc\"", "expected_output": "a"},
      {"input": "\"aa\"", "expected_output": ""}
    ]
  },
  {
    "id": 113,
    "category": "hash tables",
    "difficulty": "easy",
    "question": "Group anagrams.",
    "testcases": [
      {"input": "[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]", "expected_output": "[[\"eat\",\"tea\",\"ate\"],[\"tan\",\"nat\"],[\"bat\"]]"},
      {"input": "[\"\"]", "expected_output": "[[\"\"]]"},
      {"input": "[\"a\"]", "expected_output": "[[\"a\"]]"},
      {"input": "[\"ab\",\"ba\"]", "expected_output": "[[\"ab\",\"ba\"]]"},
      {"input": "[\"abc\",\"def\"]", "expected_output": "[[\"abc\"],[\"def\"]]"}
    ]
  },
  {
    "id": 114,
    "category": "hash tables",
    "difficulty": "easy",
    "question": "Two sum using hash table.",
    "testcases": [
      {"input": "[2,7,11,15], target=9", "expected_output": "[0,1]"},
      {"input": "[3,2,4], target=6", "expected_output": "[1,2]"},
      {"input": "[3,3], target=6", "expected_output": "[0,1]"},
      {"input": "[1,2], target=3", "expected_output": "[0,1]"},
      {"input": "[0,0], target=0", "expected_output": "[0,1]"}
    ]
  },
  {
    "id": 115,
    "category": "hash tables",
    "difficulty": "easy",
    "question": "Contains duplicate.",
    "testcases": [
      {"input": "[1,2,3,1]", "expected_output": "true"},
      {"input": "[1,2,3,4]", "expected_output": "false"},
      {"input": "[1,1,1]", "expected_output": "true"},
      {"input": "[]", "expected_output": "false"},
      {"input": "[5]", "expected_output": "false"}
    ]
  },
  {
    "id": 116,
    "category": "hash tables",
    "difficulty": "easy",
    "question": "Intersection of two arrays.",
    "testcases": [
      {"input": "[1,2,2,1],[2,2]", "expected_output": "[2]"},
      {"input": "[4,9,5],[9,4,9,8,4]", "expected_output": "[4,9]"},
      {"input": "[1],[2]", "expected_output": "[]"},
      {"input": "[],[3]", "expected_output": "[]"},
      {"input": "[0,0],[0]", "expected_output": "[0]"}
    ]
  },
  {
    "id": 117,
    "category": "hash tables",
    "difficulty": "easy",
    "question": "Happy number.",
    "testcases": [
      {"input": "19", "expected_output": "true"},
      {"input": "2", "expected_output": "false"},
      {"input": "1", "expected_output": "true"},
      {"input": "7", "expected_output": "true"},
      {"input": "4", "expected_output": "false"}
    ]
  },
  {
    "id": 118,
    "category": "hash tables",
    "difficulty": "easy",
    "question": "Ransom note.",
    "testcases": [
      {"input": "ransom=\"a\", magazine=\"b\"", "expected_output": "false"},
      {"input": "ransom=\"aa\", magazine=\"aab\"", "expected_output": "true"},
      {"input": "ransom=\"\", magazine=\"\"", "expected_output": "true"},
      {"input": "ransom=\"abc\", magazine=\"abcd\"", "expected_output": "true"},
      {"input": "ransom=\"abc\", magazine=\"ab\"", "expected_output": "false"}
    ]
  },
  {
    "id": 119,
    "category": "hash tables",
    "difficulty": "easy",
    "question": "Isomorphic strings.",
    "testcases": [
      {"input": "\"egg\",\"add\"", "expected_output": "true"},
      {"input": "\"foo\",\"bar\"", "expected_output": "false"},
      {"input": "\"paper\",\"title\"", "expected_output": "true"},
      {"input": "\"a\",\"a\"", "expected_output": "true"},
      {"input": "\"ab\",\"aa\"", "expected_output": "false"}
    ]
  },
  {
    "id": 120,
    "category": "hash tables",
    "difficulty": "easy",
    "question": "Word pattern.",
    "testcases": [
      {"input": "pattern=\"abba\", str=\"dog cat cat dog\"", "expected_output": "true"},
      {"input": "pattern=\"abba\", str=\"dog cat cat fish\"", "expected_output": "false"},
      {"input": "pattern=\"a\", str=\"dog\"", "expected_output": "true"},
      {"input": "pattern=\"\", str=\"\"", "expected_output": "true"},
      {"input": "pattern=\"ab\", str=\"dog cat\"", "expected_output": "true"}
    ]
  },
  {
    "id": 121,
    "category": "recursion",
    "difficulty": "easy",
    "question": "Compute factorial using recursion.",
    "testcases": [
      {"input": "5", "expected_output": "120"},
      {"input": "0", "expected_output": "1"},
      {"input": "1", "expected_output": "1"},
      {"input": "3", "expected_output": "6"},
      {"input": "4", "expected_output": "24"}
    ]
  },
  {
    "id": 122,
    "category": "recursion",
    "difficulty": "easy",
    "question": "Compute nth Fibonacci recursively.",
    "testcases": [
      {"input": "5", "expected_output": "5"},
      {"input": "0", "expected_output": "0"},
      {"input": "1", "expected_output": "1"},
      {"input": "10", "expected_output": "55"},
      {"input": "2", "expected_output": "1"}
    ]
  },
  {
    "id": 123,
    "category": "recursion",
    "difficulty": "easy",
    "question": "Reverse a string recursively.",
    "testcases": [
      {"input": "\"hello\"", "expected_output": "\"olleh\""},
      {"input": "\"\"", "expected_output": "\"\""},
      {"input": "\"a\"", "expected_output": "\"a\""},
      {"input": "\"ab\"", "expected_output": "\"ba\""},
      {"input": "\"recursion\"", "expected_output": "\"noisrucer\""}
    ]
  },
  {
    "id": 124,
    "category": "recursion",
    "difficulty": "easy",
    "question": "Check if string is palindrome recursively.",
    "testcases": [
      {"input": "\"radar\"", "expected_output": "true"},
      {"input": "\"hello\"", "expected_output": "false"},
      {"input": "\"\"", "expected_output": "true"},
      {"input": "\"a\"", "expected_output": "true"},
      {"input": "\"abba\"", "expected_output": "true"}
    ]
  },
  {
    "id": 125,
    "category": "recursion",
    "difficulty": "easy",
    "question": "Power function recursively.",
    "testcases": [
      {"input": "2,3", "expected_output": "8"},
      {"input": "5,0", "expected_output": "1"},
      {"input": "1,10", "expected_output": "1"},
      {"input": "3,2", "expected_output": "9"},
      {"input": "2,0", "expected_output": "1"}
    ]
  },
  {
    "id": 126,
    "category": "recursion",
    "difficulty": "easy",
    "question": "Print numbers from n to 1 recursively.",
    "testcases": [
      {"input": "5", "expected_output": "5 4 3 2 1"},
      {"input": "1", "expected_output": "1"},
      {"input": "0", "expected_output": ""},
      {"input": "3", "expected_output": "3 2 1"},
      {"input": "2", "expected_output": "2 1"}
    ]
  },
  {
    "id": 127,
    "category": "recursion",
    "difficulty": "easy",
    "question": "Sum of digits recursively.",
    "testcases": [
      {"input": "123", "expected_output": "6"},
      {"input": "0", "expected_output": "0"},
      {"input": "5", "expected_output": "5"},
      {"input": "999", "expected_output": "27"},
      {"input": "10", "expected_output": "1"}
    ]
  },
  {
    "id": 128,
    "category": "recursion",
    "difficulty": "easy",
    "question": "Count occurrences of a character recursively.",
    "testcases": [
      {"input": "\"hello\", 'l'", "expected_output": "2"},
      {"input": "\"\", 'a'", "expected_output": "0"},
      {"input": "\"a\", 'a'", "expected_output": "1"},
      {"input": "\"abc\", 'd'", "expected_output": "0"},
      {"input": "\"aa\", 'a'", "expected_output": "2"}
    ]
  },
  {
    "id": 129,
    "category": "recursion",
    "difficulty": "easy",
    "question": "Binary search recursively.",
    "testcases": [
      {"input": "[1,2,3,4,5], target=3", "expected_output": "2"},
      {"input": "[10,20,30], target=40", "expected_output": "-1"},
      {"input": "[], target=1", "expected_output": "-1"},
      {"input": "[5], target=5", "expected_output": "0"},
      {"input": "[0,1,2], target=2", "expected_output": "2"}
    ]
  },
  {
    "id": 130,
    "category": "recursion",
    "difficulty": "easy",
    "question": "Merge sort recursively.",
    "testcases": [
      {"input": "[5,2,4,1,3]", "expected_output": "[1,2,3,4,5]"},
      {"input": "[1]", "expected_output": "[1]"},
      {"input": "[]", "expected_output": "[]"},
      {"input": "[10,20]", "expected_output": "[10,20]"},
      {"input": "[0,-1,1]", "expected_output": "[-1,0,1]"}
    ]
  },
  {
    "id": 131,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Rotate array by k positions.",
    "testcases": [
      {"input": "[1,2,3,4,5], k=2", "expected_output": "[4,5,1,2,3]"},
      {"input": "[10,20], k=1", "expected_output": "[20,10]"},
      {"input": "[], k=3", "expected_output": "[]"},
      {"input": "[5], k=0", "expected_output": "[5]"},
      {"input": "[1,2,3], k=3", "expected_output": "[1,2,3]"}
    ]
  },
  {
    "id": 132,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Find missing number in array from 1 to n.",
    "testcases": [
      {"input": "[3,1,2,5], n=5", "expected_output": "4"},
      {"input": "[1], n=1", "expected_output": "none"},
      {"input": "[1,2,4], n=4", "expected_output": "3"},
      {"input": "[10,11,13], n=13", "expected_output": "12"},
      {"input": "[0,1,3], n=3", "expected_output": "2"}
    ]
  },
  {
    "id": 133,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Move zeroes to end.",
    "testcases": [
      {"input": "[0,1,0,3,12]", "expected_output": "[1,3,12,0,0]"},
      {"input": "[0]", "expected_output": "[0]"},
      {"input": "[1,2,3]", "expected_output": "[1,2,3]"},
      {"input": "[0,0,0]", "expected_output": "[0,0,0]"},
      {"input": "[5,0,10,0]", "expected_output": "[5,10,0,0]"}
    ]
  },
  {
    "id": 134,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Plus one to array representing number.",
    "testcases": [
      {"input": "[1,2,3]", "expected_output": "[1,2,4]"},
      {"input": "[9,9,9]", "expected_output": "[1,0,0,0]"},
      {"input": "[0]", "expected_output": "[1]"},
      {"input": "[1]", "expected_output": "[2]"},
      {"input": "[8,9]", "expected_output": "[9,0]"}
    ]
  },
  {
    "id": 135,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Find duplicate in array.",
    "testcases": [
      {"input": "[1,3,4,2,2]", "expected_output": "2"},
      {"input": "[3,1,3,4,2]", "expected_output": "3"},
      {"input": "[1,1]", "expected_output": "1"},
      {"input": "[5,5,5]", "expected_output": "5"},
      {"input": "[0,1,0]", "expected_output": "0"}
    ]
  },
  {
    "id": 136,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Find intersection of two arrays.",
    "testcases": [
      {"input": "[1,2,2,1],[2,2]", "expected_output": "[2,2]"},
      {"input": "[4,9,5],[9,4,9,8,4]", "expected_output": "[4,9]"},
      {"input": "[1],[1]", "expected_output": "[1]"},
      {"input": "[],[]", "expected_output": "[]"},
      {"input": "[0,1],[1,0]", "expected_output": "[0,1]"}
    ]
  },
  {
    "id": 137,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Find single number (others appear twice).",
    "testcases": [
      {"input": "[2,2,1]", "expected_output": "1"},
      {"input": "[4,1,2,1,2]", "expected_output": "4"},
      {"input": "[1]", "expected_output": "1"},
      {"input": "[0,0,5]", "expected_output": "5"},
      {"input": "[3,3,4,4,5]", "expected_output": "5"}
    ]
  },
  {
    "id": 138,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Best time to buy and sell stock.",
    "testcases": [
      {"input": "[7,1,5,3,6,4]", "expected_output": "5"},
      {"input": "[7,6,4,3,1]", "expected_output": "0"},
      {"input": "[1,2]", "expected_output": "1"},
      {"input": "[5]", "expected_output": "0"},
      {"input": "[2,4,1]", "expected_output": "2"}
    ]
  },
  {
    "id": 139,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Majority element (more than n/2).",
    "testcases": [
      {"input": "[3,2,3]", "expected_output": "3"},
      {"input": "[2,2,1,1,1,2,2]", "expected_output": "2"},
      {"input": "[1]", "expected_output": "1"},
      {"input": "[5,5,5,6]", "expected_output": "5"},
      {"input": "[0,1,0,0]", "expected_output": "0"}
    ]
  },
  {
    "id": 140,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Remove element in place.",
    "testcases": [
      {"input": "[3,2,2,3], val=3", "expected_output": "2, array=[2,2]"},
      {"input": "[0,1,2,2,3,0,4,2], val=2", "expected_output": "5, array=[0,1,3,0,4]"},
      {"input": "[1], val=1", "expected_output": "0"},
      {"input": "[], val=0", "expected_output": "0"},
      {"input": "[5,5], val=5", "expected_output": "0"}
    ]
  },
  {
    "id": 141,
    "category": "strings",
    "difficulty": "easy",
    "question": "Longest common prefix.",
    "testcases": [
      {"input": "[\"flower\",\"flow\",\"flight\"]", "expected_output": "\"fl\""},
      {"input": "[\"dog\",\"racecar\",\"car\"]", "expected_output": "\"\""},
      {"input": "[\"a\"]", "expected_output": "\"a\""},
      {"input": "[]", "expected_output": "\"\""},
      {"input": "[\"abc\",\"abc\"]", "expected_output": "\"abc\""}
    ]
  },
  {
    "id": 142,
    "category": "strings",
    "difficulty": "easy",
    "question": "Valid palindrome ignoring non-alphanum.",
    "testcases": [
      {"input": "\"A man, a plan, a canal: Panama\"", "expected_output": "true"},
      {"input": "\"race a car\"", "expected_output": "false"},
      {"input": "\"\"", "expected_output": "true"},
      {"input": "\"a.\"", "expected_output": "true"},
      {"input": "\"0P\"", "expected_output": "false"}
    ]
  },
  {
    "id": 143,
    "category": "strings",
    "difficulty": "easy",
    "question": "Implement strStr().",
    "testcases": [
      {"input": "\"hello\",\"ll\"", "expected_output": "2"},
      {"input": "\"aaaaa\",\"bba\"", "expected_output": "-1"},
      {"input": "\"\",\"\"", "expected_output": "0"},
      {"input": "\"a\",\"a\"", "expected_output": "0"},
      {"input": "\"abc\",\"d\"", "expected_output": "-1"}
    ]
  },
  {
    "id": 144,
    "category": "strings",
    "difficulty": "easy",
    "question": "Count and say.",
    "testcases": [
      {"input": "1", "expected_output": "\"1\""},
      {"input": "4", "expected_output": "\"1211\""},
      {"input": "5", "expected_output": "\"111221\""},
      {"input": "2", "expected_output": "\"11\""},
      {"input": "3", "expected_output": "\"21\""}
    ]
  },
  {
    "id": 145,
    "category": "strings",
    "difficulty": "easy",
    "question": "Reverse words in a string.",
    "testcases": [
      {"input": "\"the sky is blue\"", "expected_output": "\"blue is sky the\""},
      {"input": "\"  hello world  \"", "expected_output": "\"world hello\""},
      {"input": "\"a\"", "expected_output": "\"a\""},
      {"input": "\"\"", "expected_output": "\"\""},
      {"input": "\"ab cd\"", "expected_output": "\"cd ab\""}
    ]
  },
  {
    "id": 146,
    "category": "strings",
    "difficulty": "easy",
    "question": "Valid anagram.",
    "testcases": [
      {"input": "\"anagram\",\"nagaram\"", "expected_output": "true"},
      {"input": "\"rat\",\"car\"", "expected_output": "false"},
      {"input": "\"a\",\"a\"", "expected_output": "true"},
      {"input": "\"\",\"\"", "expected_output": "true"},
      {"input": "\"ab\",\"a\"", "expected_output": "false"}
    ]
  },
  {
    "id": 147,
    "category": "strings",
    "difficulty": "easy",
    "question": "Add binary strings.",
    "testcases": [
      {"input": "\"11\",\"1\"", "expected_output": "\"100\""},
      {"input": "\"1010\",\"1011\"", "expected_output": "\"10101\""},
      {"input": "\"0\",\"0\"", "expected_output": "\"0\""},
      {"input": "\"1\",\"0\"", "expected_output": "\"1\""},
      {"input": "\"111\",\"1\"", "expected_output": "\"1000\""}
    ]
  },
  {
    "id": 148,
    "category": "strings",
    "difficulty": "easy",
    "question": "Longest palindrome substring length.",
    "testcases": [
      {"input": "\"babad\"", "expected_output": "3"},
      {"input": "\"cbbd\"", "expected_output": "2"},
      {"input": "\"a\"", "expected_output": "1"},
      {"input": "\"\"", "expected_output": "0"},
      {"input": "\"aa\"", "expected_output": "2"}
    ]
  },
  {
    "id": 149,
    "category": "strings",
    "difficulty": "easy",
    "question": "Compare version numbers.",
    "testcases": [
      {"input": "\"1.01\",\"1.001\"", "expected_output": "0"},
      {"input": "\"1.0\",\"1.0.0\"", "expected_output": "0"},
      {"input": "\"0.1\",\"1.1\"", "expected_output": "-1"},
      {"input": "\"1.0.1\",\"1\"", "expected_output": "1"},
      {"input": "\"7.5.2.4\",\"7.5.3\"", "expected_output": "-1"}
    ]
  },
  {
    "id": 150,
    "category": "strings",
    "difficulty": "easy",
    "question": "First unique character index.",
    "testcases": [
      {"input": "\"leetcode\"", "expected_output": "0"},
      {"input": "\"loveleetcode\"", "expected_output": "2"},
      {"input": "\"aabb\"", "expected_output": "-1"},
      {"input": "\"a\"", "expected_output": "0"},
      {"input": "\"aa\"", "expected_output": "-1"}
    ]
  }
,
  {
    "id": 151,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Detect cycle in linked list.",
    "testcases": [
      {"input": "1->2->3->2 (cycle)", "expected_output": "true"},
      {"input": "1->2->3->null", "expected_output": "false"},
      {"input": "null", "expected_output": "false"},
      {"input": "1->null", "expected_output": "false"},
      {"input": "1->1 (cycle)", "expected_output": "true"}
    ]
  },
  {
    "id": 152,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Merge two sorted linked lists.",
    "testcases": [
      {"input": "1->2->4, 1->3->4", "expected_output": "1->1->2->3->4->4"},
      {"input": "null, null", "expected_output": "null"},
      {"input": "1->null, null", "expected_output": "1->null"},
      {"input": "5->6, 1->2", "expected_output": "1->2->5->6"},
      {"input": "0->2, 1", "expected_output": "0->1->2"}
    ]
  },
  {
    "id": 153,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Remove duplicates from sorted list.",
    "testcases": [
      {"input": "1->1->2", "expected_output": "1->2"},
      {"input": "1->1->2->3->3", "expected_output": "1->2->3"},
      {"input": "null", "expected_output": "null"},
      {"input": "5->null", "expected_output": "5->null"},
      {"input": "0->0->0", "expected_output": "0->null"}
    ]
  },
  {
    "id": 154,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Intersection of two linked lists.",
    "testcases": [
      {"input": "listA=4->1->8->4->5, listB=5->6->1->8->4->5", "expected_output": "8"},
      {"input": "listA=null, listB=null", "expected_output": "null"},
      {"input": "listA=1->2, listB=3->4", "expected_output": "null"},
      {"input": "listA=1->2->3, listB=2->3", "expected_output": "2"},
      {"input": "listA=0->1, listB=0->1", "expected_output": "0"}
    ]
  },
  {
    "id": 155,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Palindrome linked list.",
    "testcases": [
      {"input": "1->2->2->1", "expected_output": "true"},
      {"input": "1->2", "expected_output": "false"},
      {"input": "null", "expected_output": "true"},
      {"input": "5->null", "expected_output": "true"},
      {"input": "0->1->0", "expected_output": "true"}
    ]
  },
  {
    "id": 156,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Delete node without head.",
    "testcases": [
      {"input": "4->5->1->9, delete 5", "expected_output": "4->1->9"},
      {"input": "1->2, delete 1", "expected_output": "2"},
      {"input": "5->null, delete 5", "expected_output": "null"},
      {"input": "10->20->30, delete 20", "expected_output": "10->30"},
      {"input": "0->1->2, delete 1", "expected_output": "0->2"}
    ]
  },
  {
    "id": 157,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Remove nth node from end.",
    "testcases": [
      {"input": "1->2->3->4->5, n=2", "expected_output": "1->2->3->5"},
      {"input": "1->null, n=1", "expected_output": "null"},
      {"input": "5->null, n=1", "expected_output": "null"},
      {"input": "10->20, n=1", "expected_output": "10->null"},
      {"input": "0->1->2, n=3", "expected_output": "1->2"}
    ]
  },
  {
    "id": 158,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Swap nodes in pairs.",
    "testcases": [
      {"input": "1->2->3->4", "expected_output": "2->1->4->3"},
      {"input": "null", "expected_output": "null"},
      {"input": "5->null", "expected_output": "5->null"},
      {"input": "10->20, n=2", "expected_output": "20->10"},
      {"input": "0->1->2->3", "expected_output": "1->0->3->2"}
    ]
  },
  {
    "id": 159,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Odd even linked list.",
    "testcases": [
      {"input": "1->2->3->4->5", "expected_output": "1->3->5->2->4"},
      {"input": "2->1->3->5->6->4->7", "expected_output": "2->3->6->7->1->5->4"},
      {"input": "null", "expected_output": "null"},
      {"input": "5->null", "expected_output": "5->null"},
      {"input": "10->20", "expected_output": "10->20"}
    ]
  },
  {
    "id": 160,
    "category": "linked lists",
    "difficulty": "easy",
    "question": "Add two numbers as linked lists.",
    "testcases": [
      {"input": "2->4->3, 5->6->4", "expected_output": "7->0->8"},
      {"input": "0->null, 0->null", "expected_output": "0->null"},
      {"input": "9->9->9, 1->null", "expected_output": "0->0->0->1"},
      {"input": "1->2, 3->4", "expected_output": "4->6"},
      {"input": "5->null, 5->null", "expected_output": "0->1"}
    ]
  },
  {
    "id": 161,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Min stack.",
    "testcases": [
      {"input": "push 1, push 2, min", "expected_output": "1"},
      {"input": "push 5, min", "expected_output": "5"},
      {"input": "push 3, push 2, pop, min", "expected_output": "3"},
      {"input": "push -1, min", "expected_output": "-1"},
      {"input": "push 0, push -2, min", "expected_output": "-2"}
    ]
  },
  {
    "id": 162,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Valid parentheses with multiple types.",
    "testcases": [
      {"input": "\"()[]{}\"", "expected_output": "true"},
      {"input": "\"(]\"", "expected_output": "false"},
      {"input": "\"\"", "expected_output": "true"},
      {"input": "\"([)]\"", "expected_output": "false"},
      {"input": "\"{[]}\"", "expected_output": "true"}
    ]
  },
  {
    "id": 163,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Daily temperatures (next greater).",
    "testcases": [
      {"input": "[73,74,75,71,69,72,76,73]", "expected_output": "[1,1,4,2,1,1,0,0]"},
      {"input": "[30,40,50,60]", "expected_output": "[1,1,1,0]"},
      {"input": "[30,60,90]", "expected_output": "[1,1,0]"},
      {"input": "[100]", "expected_output": "[0]"},
      {"input": "[50,40,30]", "expected_output": "[0,0,0]"}
    ]
  },
  {
    "id": 164,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Backspace string compare.",
    "testcases": [
      {"input": "\"ab#c\",\"ad#c\"", "expected_output": "true"},
      {"input": "\"ab##\",\"c#d#\"", "expected_output": "true"},
      {"input": "\"a#c\",\"b\"", "expected_output": "false"},
      {"input": "\"\",\"\"", "expected_output": "true"},
      {"input": "\"a#b\",\"b\"", "expected_output": "true"}
    ]
  },
  {
    "id": 165,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Implement queue using stacks.",
    "testcases": [
      {"input": "enqueue 1, enqueue 2, dequeue", "expected_output": "1"},
      {"input": "enqueue 5, dequeue", "expected_output": "5"},
      {"input": "dequeue empty", "expected_output": "error"},
      {"input": "enqueue 10, enqueue 20, dequeue, dequeue", "expected_output": "20"},
      {"input": "enqueue 0", "expected_output": "0 front"}
    ]
  },
  {
    "id": 166,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Next greater element I.",
    "testcases": [
      {"input": "nums1=[4,1,2], nums2=[1,3,4,2]", "expected_output": "[-1,3,-1]"},
      {"input": "nums1=[2,4], nums2=[1,2,3,4]", "expected_output": "[3,-1]"},
      {"input": "nums1=[1], nums2=[1]", "expected_output": "[-1]"},
      {"input": "nums1=[], nums2=[]", "expected_output": "[]"},
      {"input": "nums1=[5], nums2=[6,5,4]", "expected_output": "[-1]"}
    ]
  },
  {
    "id": 167,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Remove adjacent duplicates.",
    "testcases": [
      {"input": "\"abbaca\"", "expected_output": "\"ca\""},
      {"input": "\"azxxzy\"", "expected_output": "\"ay\""},
      {"input": "\"a\"", "expected_output": "\"a\""},
      {"input": "\"\"", "expected_output": "\"\""},
      {"input": "\"aa\"", "expected_output": "\"\""}
    ]
  },
  {
    "id": 168,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Make the string great.",
    "testcases": [
      {"input": "\"leEeetcode\"", "expected_output": "\"leetcode\""},
      {"input": "\"abBAcC\"", "expected_output": "\"\""},
      {"input": "\"s\"", "expected_output": "\"s\""},
      {"input": "\"Aa\"", "expected_output": "\"\""},
      {"input": "\"AbBa\"", "expected_output": "\"\""}
    ]
  },
  {
    "id": 169,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Decode string.",
    "testcases": [
      {"input": "\"3[a]2[bc]\"", "expected_output": "\"aaabcbc\""},
      {"input": "\"3[a2[c]]\"", "expected_output": "\"accaccacc\""},
      {"input": "\"abc\"", "expected_output": "\"abc\""},
      {"input": "\"2[ab]\"", "expected_output": "\"abab\""},
      {"input": "\"1[a]\"", "expected_output": "\"a\""}
    ]
  },
  {
    "id": 170,
    "category": "stacks",
    "difficulty": "easy",
    "question": "Simplify path.",
    "testcases": [
      {"input": "\"/home/\"", "expected_output": "\"/home\""},
      {"input": "\"/../\"", "expected_output": "\"/\""},
      {"input": "\"/home//foo/\"", "expected_output": "\"/home/foo\""},
      {"input": "\"/a/./b/../../c/\"", "expected_output": "\"/c\""},
      {"input": "\"/\"", "expected_output": "\"/\""}
    ]
  },
  {
    "id": 171,
    "category": "queues",
    "difficulty": "easy",
    "question": "Implement stack using queues.",
    "testcases": [
      {"input": "push 1, push 2, pop", "expected_output": "2"},
      {"input": "push 5, pop", "expected_output": "5"},
      {"input": "pop empty", "expected_output": "error"},
      {"input": "push 10, push 20, pop", "expected_output": "20"},
      {"input": "push 0, top", "expected_output": "0"}
    ]
  },
  {
    "id": 172,
    "category": "queues",
    "difficulty": "easy",
    "question": "Number of recent calls.",
    "testcases": [
      {"input": "ping 1, ping 100, ping 3001, ping 3002", "expected_output": "[1,2,3,3]"},
      {"input": "ping 0", "expected_output": "[1]"},
      {"input": "ping 100, ping 200", "expected_output": "[1,2]"},
      {"input": "ping 5000, ping 5001", "expected_output": "[1,2]"},
      {"input": "ping 1", "expected_output": "[1]"}
    ]
  },
  {
    "id": 173,
    "category": "queues",
    "difficulty": "easy",
    "question": "Moving average from data stream.",
    "testcases": [
      {"input": "size=3, next 1, next 10, next 3, next 5", "expected_output": "[1.0,5.5,4.66667,6.0]"},
      {"input": "size=1, next 5", "expected_output": "[5.0]"},
      {"input": "size=2, next 0, next 1", "expected_output": "[0.0,0.5]"},
      {"input": "size=3, next 2, next 4, next 6", "expected_output": "[2.0,3.0,4.0]"},
      {"input": "size=4, next 1", "expected_output": "[1.0]"}
    ]
  },
  {
    "id": 174,
    "category": "queues",
    "difficulty": "easy",
    "question": "Design circular queue.",
    "testcases": [
      {"input": "enQueue 1, enQueue 2, deQueue", "expected_output": "1"},
      {"input": "enQueue 5, Rear", "expected_output": "5"},
      {"input": "isEmpty", "expected_output": "true"},
      {"input": "enQueue 10, enQueue 20, deQueue", "expected_output": "10"},
      {"input": "enQueue 0, Front", "expected_output": "0"}
    ]
  },
  {
    "id": 175,
    "category": "queues",
    "difficulty": "easy",
    "question": "Design circular deque.",
    "testcases": [
      {"input": "insertFront 1, insertLast 2, deleteFront", "expected_output": "1"},
      {"input": "insertLast 5, getRear", "expected_output": "5"},
      {"input": "isEmpty", "expected_output": "true"},
      {"input": "insertFront 10, insertFront 20, deleteLast", "expected_output": "10"},
      {"input": "insertLast 0, getFront", "expected_output": "0"}
    ]
  },
  {
    "id": 176,
    "category": "queues",
    "difficulty": "easy",
    "question": "Reveal cards in increasing order.",
    "testcases": [
      {"input": "[17,13,11,2,3,5,7]", "expected_output": "[2,13,3,11,5,17,7]"},
      {"input": "[1,2,3]", "expected_output": "[1,3,2]"},
      {"input": "[5]", "expected_output": "[5]"},
      {"input": "[10,20]", "expected_output": "[10,20]"},
      {"input": "[0,1,2]", "expected_output": "[0,2,1]"}
    ]
  },
  {
    "id": 177,
    "category": "queues",
    "difficulty": "easy",
    "question": "Number of students unable to eat lunch.",
    "testcases": [
      {"input": "students=[1,1,0,0], sandwiches=[0,1,0,1]", "expected_output": "0"},
      {"input": "students=[1,1,1,0,0,1], sandwiches=[1,0,0,0,1,1]", "expected_output": "3"},
      {"input": "students=[0], sandwiches=[0]", "expected_output": "0"},
      {"input": "students=[1], sandwiches=[0]", "expected_output": "1"},
      {"input": "students=[], sandwiches=[]", "expected_output": "0"}
    ]
  },
  {
    "id": 178,
    "category": "queues",
    "difficulty": "easy",
    "question": "Time needed to buy tickets.",
    "testcases": [
      {"input": "[2,3,2], k=2", "expected_output": "6"},
      {"input": "[5,1,1,1], k=0", "expected_output": "8"},
      {"input": "[1], k=0", "expected_output": "1"},
      {"input": "[0,0,0], k=1", "expected_output": "0"},
      {"input": "[4,2,3], k=1", "expected_output": "5"}
    ]
  },
  {
    "id": 179,
    "category": "queues",
    "difficulty": "easy",
    "question": "Recent counter.",
    "testcases": [
      {"input": "ping(1),ping(100),ping(3001),ping(3002)", "expected_output": "[1,2,3,3]"},
      {"input": "ping(0)", "expected_output": "[1]"},
      {"input": "ping(500),ping(600)", "expected_output": "[1,2]"},
      {"input": "ping(1000),ping(4000)", "expected_output": "[1,1]"},
      {"input": "ping(200)", "expected_output": "[1]"}
    ]
  },
  {
    "id": 180,
    "category": "queues",
    "difficulty": "easy",
    "question": "Dota2 senate.",
    "testcases": [
      {"input": "\"RD\"", "expected_output": "\"Radiant\""},
      {"input": "\"RDD\"", "expected_output": "\"Dire\""},
      {"input": "\"R\"", "expected_output": "\"Radiant\""},
      {"input": "\"D\"", "expected_output": "\"Dire\""},
      {"input": "\"RRDDD\"", "expected_output": "\"Radiant\""}
    ]
  },
  {
    "id": 181,
    "category": "heaps",
    "difficulty": "easy",
    "question": "Kth largest element in stream.",
    "testcases": [
      {"input": "k=3, [4,5,8,2], add 3", "expected_output": "4"},
      {"input": "k=1, [1], add 2", "expected_output": "2"},
      {"input": "k=2, [5,10], add 1", "expected_output": "5"},
      {"input": "k=4, [1,2,3,4], add 5", "expected_output": "2"},
      {"input": "k=1, [0], add -1", "expected_output": "0"}
    ]
  },
  {
    "id": 182,
    "category": "heaps",
    "difficulty": "easy",
    "question": "Last stone weight.",
    "testcases": [
      {"input": "[2,7,4,1,8,1]", "expected_output": "1"},
      {"input": "[1]", "expected_output": "1"},
      {"input": "[2,2]", "expected_output": "0"},
      {"input": "[5,5,5]", "expected_output": "5"},
      {"input": "[10,20]", "expected_output": "10"}
    ]
  },
  {
    "id": 183,
    "category": "heaps",
    "difficulty": "easy",
    "question": "K closest points to origin.",
    "testcases": [
      {"input": "[[1,3],[-2,2]], k=1", "expected_output": "[[-2,2]]"},
      {"input": "[[3,3],[5,-1],[-2,4]], k=2", "expected_output": "[[3,3],[-2,4]]"},
      {"input": "[[0,0]], k=1", "expected_output": "[[0,0]]"},
      {"input": "[[1,0],[0,1]], k=1", "expected_output": "[[1,0]] or [[0,1]]"},
      {"input": "[[2,2],[3,3]], k=1", "expected_output": "[[2,2]]"}
    ]
  },
  {
    "id": 184,
    "category": "heaps",
    "difficulty": "easy",
    "question": "Sort characters by frequency.",
    "testcases": [
      {"input": "\"tree\"", "expected_output": "\"eert\""},
      {"input": "\"cccaaa\"", "expected_output": "\"aaaccc\""},
      {"input": "\"a\"", "expected_output": "\"a\""},
      {"input": "\"\"", "expected_output": "\"\""},
      {"input": "\"abc\"", "expected_output": "\"abc\""}
    ]
  },
  {
    "id": 185,
    "category": "heaps",
    "difficulty": "easy",
    "question": "Top k frequent elements.",
    "testcases": [
      {"input": "[1,1,1,2,2,3], k=2", "expected_output": "[1,2]"},
      {"input": "[1], k=1", "expected_output": "[1]"},
      {"input": "[4,4,4,5], k=1", "expected_output": "[4]"},
      {"input": "[0,1,2], k=3", "expected_output": "[0,1,2]"},
      {"input": "[-1,-1], k=1", "expected_output": "[-1]"}
    ]
  },
  {
    "id": 186,
    "category": "heaps",
    "difficulty": "easy",
    "question": "Kth largest element in array.",
    "testcases": [
      {"input": "[3,2,1,5,6,4], k=2", "expected_output": "5"},
      {"input": "[3,2,3,1,2,4,5,5,6], k=4", "expected_output": "4"},
      {"input": "[1], k=1", "expected_output": "1"},
      {"input": "[5,4,3], k=1", "expected_output": "5"},
      {"input": "[0,-1,1], k=2", "expected_output": "0"}
    ]
  },
  {
    "id": 187,
    "category": "heaps",
    "difficulty": "easy",
    "question": "Find median from data stream.",
    "testcases": [
      {"input": "add 1, add 2, find", "expected_output": "1.5"},
      {"input": "add 3, find", "expected_output": "3"},
      {"input": "add 0, add 0, find", "expected_output": "0"},
      {"input": "add 5, find", "expected_output": "5"},
      {"input": "add 10, add 20, find", "expected_output": "15"}
    ]
  },
  {
    "id": 188,
    "category": "heaps",
    "difficulty": "easy",
    "question": "Merge k sorted lists.",
    "testcases": [
      {"input": "[1->4->5, 1->3->4, 2->6]", "expected_output": "1->1->2->3->4->4->5->6"},
      {"input": "[]", "expected_output": "null"},
      {"input": "[null]", "expected_output": "null"},
      {"input": "[5->null]", "expected_output": "5->null"},
      {"input": "[0->1, 2->3]", "expected_output": "0->1->2->3"}
    ]
  },
  {
    "id": 189,
    "category": "heaps",
    "difficulty": "easy",
    "question": "Reorganize string.",
    "testcases": [
      {"input": "\"aab\"", "expected_output": "\"aba\""},
      {"input": "\"aaab\"", "expected_output": "\"\""},
      {"input": "\"a\"", "expected_output": "\"a\""},
      {"input": "\"ab\"", "expected_output": "\"ab\""},
      {"input": "\"aaa\"", "expected_output": "\"\""}
    ]
  },
  {
    "id": 190,
    "category": "heaps",
    "difficulty": "easy",
    "question": "Longest happy string.",
    "testcases": [
      {"input": "a=1,b=1,c=7", "expected_output": "\"ccaccbcc\""},
      {"input": "a=2,b=2,c=1", "expected_output": "\"aabbc\""},
      {"input": "a=0,b=0,c=0", "expected_output": "\"\""},
      {"input": "a=1,b=0,c=0", "expected_output": "\"a\""},
      {"input": "a=3,b=3,c=3", "expected_output": "\"abcabcabc\""}
    ]
  },
  {
    "id": 191,
    "category": "trees",
    "difficulty": "easy",
    "question": "Maximum depth of binary tree.",
    "testcases": [
      {"input": "3->9->20->null->null->15->7", "expected_output": "3"},
      {"input": "1->null->2", "expected_output": "2"},
      {"input": "null", "expected_output": "0"},
      {"input": "5", "expected_output": "1"},
      {"input": "0->1->2", "expected_output": "3"}
    ]
  },
  {
    "id": 192,
    "category": "trees",
    "difficulty": "easy",
    "question": "Symmetric tree.",
    "testcases": [
      {"input": "1->2->2->3->4->4->3", "expected_output": "true"},
      {"input": "1->2->2->null->3->null->3", "expected_output": "false"},
      {"input": "null", "expected_output": "true"},
      {"input": "5", "expected_output": "true"},
      {"input": "1->2->3", "expected_output": "false"}
    ]
  },
  {
    "id": 193,
    "category": "trees",
    "difficulty": "easy",
    "question": "Convert sorted array to BST.",
    "testcases": [
      {"input": "[-10,-3,0,5,9]", "expected_output": "balanced BST"},
      {"input": "[1,3]", "expected_output": "balanced BST"},
      {"input": "[]", "expected_output": "null"},
      {"input": "[5]", "expected_output": "5"},
      {"input": "[0,1,2]", "expected_output": "balanced BST"}
    ]
  },
  {
    "id": 194,
    "category": "trees",
    "difficulty": "easy",
    "question": "Balanced binary tree.",
    "testcases": [
      {"input": "3->9->20->null->null->15->7", "expected_output": "true"},
      {"input": "1->2->3->4->5->null->null", "expected_output": "false"},
      {"input": "null", "expected_output": "true"},
      {"input": "5", "expected_output": "true"},
      {"input": "1->2->2", "expected_output": "true"}
    ]
  },
  {
    "id": 195,
    "category": "trees",
    "difficulty": "easy",
    "question": "Minimum depth of binary tree.",
    "testcases": [
      {"input": "3->9->20->null->null->15->7", "expected_output": "2"},
      {"input": "2->null->3->null->4->null->5->null->6", "expected_output": "5"},
      {"input": "null", "expected_output": "0"},
      {"input": "5", "expected_output": "1"},
      {"input": "1->2", "expected_output": "2"}
    ]
  },
  {
    "id": 196,
    "category": "trees",
    "difficulty": "easy",
    "question": "Path sum.",
    "testcases": [
      {"input": "5->4->8->11->null->13->4->7->2->null->null->null->1, sum=22", "expected_output": "true"},
      {"input": "1->2->3, sum=5", "expected_output": "false"},
      {"input": "null, sum=0", "expected_output": "false"},
      {"input": "1, sum=1", "expected_output": "true"},
      {"input": "0->1, sum=1", "expected_output": "true"}
    ]
  },
  {
    "id": 197,
    "category": "trees",
    "difficulty": "easy",
    "question": "Invert binary tree.",
    "testcases": [
      {"input": "4->2->7->1->3->6->9", "expected_output": "4->7->2->9->6->3->1"},
      {"input": "null", "expected_output": "null"},
      {"input": "5", "expected_output": "5"},
      {"input": "1->2", "expected_output": "1->null->2"},
      {"input": "0->1->2", "expected_output": "0->2->1"}
    ]
  },
  {
    "id": 198,
    "category": "trees",
    "difficulty": "easy",
    "question": "Same tree.",
    "testcases": [
      {"input": "1->2->3, 1->2->3", "expected_output": "true"},
      {"input": "1->2, 1->null->2", "expected_output": "false"},
      {"input": "null, null", "expected_output": "true"},
      {"input": "5, 5", "expected_output": "true"},
      {"input": "1->2->3, 1->2->4", "expected_output": "false"}
    ]
  },
  {
    "id": 199,
    "category": "trees",
    "difficulty": "easy",
    "question": "Binary tree paths.",
    "testcases": [
      {"input": "1->2->3->null->5", "expected_output": "[\"1->2->5\",\"1->3\"]"},
      {"input": "1", "expected_output": "[\"1\"]"},
      {"input": "null", "expected_output": "[]"},
      {"input": "5->null->6", "expected_output": "[\"5->6\"]"},
      {"input": "0->1->2", "expected_output": "[\"0->1->2\"]"}
    ]
  },
  {
    "id": 200,
    "category": "trees",
    "difficulty": "easy",
    "question": "Lowest common ancestor in BST.",
    "testcases": [
      {"input": "6->2->8->0->4->7->9->null->null->3->5, p=2, q=8", "expected_output": "6"},
      {"input": "6->2->8->0->4->7->9->null->null->3->5, p=2, q=4", "expected_output": "2"},
      {"input": "1->2, p=1, q=2", "expected_output": "1"},
      {"input": "5, p=5, q=5", "expected_output": "5"},
      {"input": "0->1->2, p=1, q=2", "expected_output": "0"}
    ]
  }
,
  {
    "id": 201,
    "category": "graphs",
    "difficulty": "easy",
    "question": "Find the town judge.",
    "testcases": [
      {"input": "n=2, trust=[[1,2]]", "expected_output": "2"},
      {"input": "n=3, trust=[[1,3],[2,3]]", "expected_output": "3"},
      {"input": "n=1, trust=[]", "expected_output": "1"},
      {"input": "n=3, trust=[[1,2],[2,1]]", "expected_output": "-1"},
      {"input": "n=4, trust=[[1,4],[2,4],[3,4]]", "expected_output": "4"}
    ]
  },
  {
    "id": 202,
    "category": "graphs",
    "difficulty": "easy",
    "question": "All paths from source to target.",
    "testcases": [
      {"input": "[[1,2],[3],[3],[]]", "expected_output": "[[0,1,3],[0,2,3]]"},
      {"input": "[[1],[2],[3],[]]", "expected_output": "[[0,1,2,3]]"},
      {"input": "[[1]], [0]]", "expected_output": "[]"},
      {"input": "[[ ]]", "expected_output": "[[0]]"},
      {"input": "[[1,2,3],[4],[4],[4],[]]", "expected_output": "[[0,1,4],[0,2,4],[0,3,4]]"}
    ]
  },
  {
    "id": 203,
    "category": "graphs",
    "difficulty": "easy",
    "question": "Keys and rooms.",
    "testcases": [
      {"input": "[[1],[2],[3],[]]", "expected_output": "true"},
      {"input": "[[1],[0,3],[],[2]]", "expected_output": "false"},
      {"input": "[[]]", "expected_output": "true"},
      {"input": "[[1,2]]", "expected_output": "false"},
      {"input": "[[1],[2]]", "expected_output": "false"}
    ]
  },
  {
    "id": 204,
    "category": "graphs",
    "difficulty": "easy",
    "question": "Number of provinces.",
    "testcases": [
      {"input": "[[1,1,0],[1,1,0],[0,0,1]]", "expected_output": "2"},
      {"input": "[[1,0,0],[0,1,0],[0,0,1]]", "expected_output": "3"},
      {"input": "[[1]]", "expected_output": "1"},
      {"input": "[]", "expected_output": "0"},
      {"input": "[[1,1],[1,1]]", "expected_output": "1"}
    ]
  },
  {
    "id": 205,
    "category": "graphs",
    "difficulty": "easy",
    "question": "Clone graph.",
    "testcases": [
      {"input": "1-2-4,1-3-4", "expected_output": "cloned graph"},
      {"input": "empty", "expected_output": "null"},
      {"input": "single node", "expected_output": "cloned"},
      {"input": "1-2", "expected_output": "cloned"},
      {"input": "cycle 1-2-1", "expected_output": "cloned with cycle"}
    ]
  },
  {
    "id": 206,
    "category": "graphs",
    "difficulty": "easy",
    "question": "Reorder routes to make all paths lead to city zero.",
    "testcases": [
      {"input": "n=6, connections=[[0,1],[1,3],[2,3],[4,0],[4,5]]", "expected_output": "3"},
      {"input": "n=5, connections=[[1,0],[1,2],[3,2],[3,4]]", "expected_output": "2"},
      {"input": "n=3, connections=[[1,0],[2,0]]", "expected_output": "0"},
      {"input": "n=1, connections=[]", "expected_output": "0"},
      {"input": "n=2, connections=[[0,1]]", "expected_output": "0"}
    ]
  },
  {
    "id": 207,
    "category": "graphs",
    "difficulty": "easy",
    "question": "Minimum number of vertices to reach all nodes.",
    "testcases": [
      {"input": "n=6, edges=[[0,1],[0,2],[2,5],[3,4],[4,2]]", "expected_output": "[0,3]"},
      {"input": "n=5, edges=[[0,1],[2,1],[3,1],[1,4],[2,4]]", "expected_output": "[0,2,3]"},
      {"input": "n=1, edges=[]", "expected_output": "[0]"},
      {"input": "n=3, edges=[[0,1],[1,2]]", "expected_output": "[0]"},
      {"input": "n=4, edges=[]", "expected_output": "[0,1,2,3]"}
    ]
  },
  {
    "id": 208,
    "category": "graphs",
    "difficulty": "easy",
    "question": "Find center of star graph.",
    "testcases": [
      {"input": "[[1,2],[2,3],[4,2]]", "expected_output": "2"},
      {"input": "[[1,2],[5,1],[1,3],[1,4]]", "expected_output": "1"},
      {"input": "[[1,2]]", "expected_output": "1 or 2"},
      {"input": "[[1,2],[2,3]]", "expected_output": "2"},
      {"input": "[[1,3],[2,3],[4,3]]", "expected_output": "3"}
    ]
  },
  {
    "id": 209,
    "category": "graphs",
    "difficulty": "easy",
    "question": "Maximum depth of n-ary tree.",
    "testcases": [
      {"input": "1->3,5,6->2,4,7", "expected_output": "3"},
      {"input": "null", "expected_output": "0"},
      {"input": "5", "expected_output": "1"},
      {"input": "1->2->3", "expected_output": "3"},
      {"input": "0->1,2,3", "expected_output": "2"}
    ]
  },
  {
    "id": 210,
    "category": "graphs",
    "difficulty": "easy",
    "question": "Count servers that communicate.",
    "testcases": [
      {"input": "[[1,0],[0,1]]", "expected_output": "0"},
      {"input": "[[1,0],[1,1]]", "expected_output": "3"},
      {"input": "[[1]]", "expected_output": "0"},
      {"input": "[[0,0],[0,0]]", "expected_output": "0"},
      {"input": "[[1,1],[1,1]]", "expected_output": "4"}
    ]
  },
  {
    "id": 211,
    "category": "arrays",
    "difficulty": "medium",
    "question": "Three sum.",
    "testcases": [
      {"input": "[-1,0,1,2,-1,-4]", "expected_output": "[[-1,-1,2],[-1,0,1]]"},
      {"input": "[0,1,1]", "expected_output": "[]"},
      {"input": "[0,0,0]", "expected_output": "[[0,0,0]]"},
      {"input": "[1,2,3]", "expected_output": "[]"},
      {"input": "[-2,0,2]", "expected_output": "[[-2,0,2]]"}
    ]
  },
  {
    "id": 212,
    "category": "arrays",
    "difficulty": "medium",
    "question": "Container with most water.",
    "testcases": [
      {"input": "[1,8,6,2,5,4,8,3,7]", "expected_output": "49"},
      {"input": "[1,1]", "expected_output": "1"},
      {"input": "[4,3,2,1,4]", "expected_output": "16"},
      {"input": "[1,2,1]", "expected_output": "2"},
      {"input": "[0,2]", "expected_output": "0"}
    ]
  },
  {
    "id": 213,
    "category": "arrays",
    "difficulty": "medium",
    "question": "Sort colors (0,1,2).",
    "testcases": [
      {"input": "[2,0,2,1,1,0]", "expected_output": "[0,0,1,1,2,2]"},
      {"input": "[2,0,1]", "expected_output": "[0,1,2]"},
      {"input": "[0]", "expected_output": "[0]"},
      {"input": "[1]", "expected_output": "[1]"},
      {"input": "[2,2,2]", "expected_output": "[2,2,2]"}
    ]
  },
  {
    "id": 214,
    "category": "arrays",
    "difficulty": "medium",
    "question": "Kth largest element.",
    "testcases": [
      {"input": "[3,2,1,5,6,4], k=2", "expected_output": "5"},
      {"input": "[3,2,3,1,2,4,5,5,6], k=4", "expected_output": "4"},
      {"input": "[1], k=1", "expected_output": "1"},
      {"input": "[5,4,3,2,1], k=3", "expected_output": "3"},
      {"input": "[-1,0,1], k=1", "expected_output": "1"}
    ]
  },
  {
    "id": 215,
    "category": "arrays",
    "difficulty": "medium",
    "question": "Merge intervals.",
    "testcases": [
      {"input": "[[1,3],[2,6],[8,10],[15,18]]", "expected_output": "[[1,6],[8,10],[15,18]]"},
      {"input": "[[1,4],[4,5]]", "expected_output": "[[1,5]]"},
      {"input": "[[1,2]]", "expected_output": "[[1,2]]"},
      {"input": "[]", "expected_output": "[]"},
      {"input": "[[2,3],[1,4]]", "expected_output": "[[1,4]]"}
    ]
  },
  {
    "id": 216,
    "category": "arrays",
    "difficulty": "medium",
    "question": "Product of array except self.",
    "testcases": [
      {"input": "[1,2,3,4]", "expected_output": "[24,12,8,6]"},
      {"input": "[-1,1,0,-3,3]", "expected_output": "[0,0,9,0,0]"},
      {"input": "[5]", "expected_output": "[1]"},
      {"input": "[0,0]", "expected_output": "[0,0]"},
      {"input": "[2,3]", "expected_output": "[3,2]"}
    ]
  },
  {
    "id": 217,
    "category": "arrays",
    "difficulty": "medium",
    "question": "Subarray sum equals k.",
    "testcases": [
      {"input": "[1,1,1], k=2", "expected_output": "2"},
      {"input": "[1,2,3], k=3", "expected_output": "2"},
      {"input": "[1], k=1", "expected_output": "1"},
      {"input": "[0,0], k=0", "expected_output": "3"},
      {"input": "[-1,-1,1], k=0", "expected_output": "1"}
    ]
  },
  {
    "id": 218,
    "category": "arrays",
    "difficulty": "medium",
    "question": "Find duplicates.",
    "testcases": [
      {"input": "[4,3,2,7,8,2,3,1]", "expected_output": "[2,3]"},
      {"input": "[1,1,2]", "expected_output": "[1]"},
      {"input": "[1]", "expected_output": "[]"},
      {"input": "[5,5,5]", "expected_output": "[5]"},
      {"input": "[1,2,3,4]", "expected_output": "[]"}
    ]
  },
  {
    "id": 219,
    "category": "arrays",
    "difficulty": "medium",
    "question": "Longest consecutive sequence.",
    "testcases": [
      {"input": "[100,4,200,1,3,2]", "expected_output": "4"},
      {"input": "[0,3,7,2,5,8,4,6,0,1]", "expected_output": "9"},
      {"input": "[1]", "expected_output": "1"},
      {"input": "[]", "expected_output": "0"},
      {"input": "[1,3,5]", "expected_output": "1"}
    ]
  },
  {
    "id": 220,
    "category": "arrays",
    "difficulty": "medium",
    "question": "Set matrix zeroes.",
    "testcases": [
      {"input": "[[1,1,1],[1,0,1],[1,1,1]]", "expected_output": "[[1,0,1],[0,0,0],[1,0,1]]"},
      {"input": "[[0,1,2,0],[3,4,5,2],[1,3,1,5]]", "expected_output": "[[0,0,0,0],[0,4,5,0],[0,3,1,0]]"},
      {"input": "[[1]]", "expected_output": "[[1]]"},
      {"input": "[[0]]", "expected_output": "[[0]]"},
      {"input": "[[1,0],[0,1]]", "expected_output": "[[0,0],[0,0]]"}
    ]
  },
  {
    "id": 221,
    "category": "strings",
    "difficulty": "medium",
    "question": "Longest substring without repeating characters.",
    "testcases": [
      {"input": "\"abcabcbb\"", "expected_output": "3"},
      {"input": "\"bbbbb\"", "expected_output": "1"},
      {"input": "\"pwwkew\"", "expected_output": "3"},
      {"input": "\"\"", "expected_output": "0"},
      {"input": "\"a\"", "expected_output": "1"}
    ]
  },
  {
    "id": 222,
    "category": "strings",
    "difficulty": "medium",
    "question": "Longest palindromic substring.",
    "testcases": [
      {"input": "\"babad\"", "expected_output": "\"bab\""},
      {"input": "\"cbbd\"", "expected_output": "\"bb\""},
      {"input": "\"a\"", "expected_output": "\"a\""},
      {"input": "\"ac\"", "expected_output": "\"a\""},
      {"input": "\"\"", "expected_output": "\"\""}
    ]
  },
  {
    "id": 223,
    "category": "strings",
    "difficulty": "medium",
    "question": "String to integer (atoi).",
    "testcases": [
      {"input": "\"42\"", "expected_output": "42"},
      {"input": "\"   -42\"", "expected_output": "-42"},
      {"input": "\"4193 with words\"", "expected_output": "4193"},
      {"input": "\"words and 987\"", "expected_output": "0"},
      {"input": "\"-91283472332\"", "expected_output": "-2147483648"}
    ]
  },
  {
    "id": 224,
    "category": "strings",
    "difficulty": "medium",
    "question": "Group anagrams.",
    "testcases": [
      {"input": "[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]", "expected_output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]"},
      {"input": "[\"\"]", "expected_output": "[[\"\"]]"},
      {"input": "[\"a\"]", "expected_output": "[[\"a\"]]"},
      {"input": "[\"ab\",\"ba\"]", "expected_output": "[[\"ab\",\"ba\"]]"},
      {"input": "[\"abc\",\"def\"]", "expected_output": "[[\"abc\"],[\"def\"]]"}
    ]
  },
  {
    "id": 225,
    "category": "strings",
    "difficulty": "medium",
    "question": "Simplify path.",
    "testcases": [
      {"input": "\"/home/\"", "expected_output": "\"/home\""},
      {"input": "\"/../\"", "expected_output": "\"/\""},
      {"input": "\"/home//foo/\"", "expected_output": "\"/home/foo\""},
      {"input": "\"/a/./b/../../c/\"", "expected_output": "\"/c\""},
      {"input": "\"/a//b////c/d//././/..\"", "expected_output": "\"/a/b/c\""}
    ]
  },
  {
    "id": 226,
    "category": "strings",
    "difficulty": "medium",
    "question": "Multiply strings.",
    "testcases": [
      {"input": "\"2\",\"3\"", "expected_output": "\"6\""},
      {"input": "\"123\",\"456\"", "expected_output": "\"56088\""},
      {"input": "\"0\",\"0\"", "expected_output": "\"0\""},
      {"input": "\"1\",\"1\"", "expected_output": "\"1\""},
      {"input": "\"9\",\"9\"", "expected_output": "\"81\""}
    ]
  },
  {
    "id": 227,
    "category": "strings",
    "difficulty": "medium",
    "question": "Decode ways.",
    "testcases": [
      {"input": "\"12\"", "expected_output": "2"},
      {"input": "\"226\"", "expected_output": "3"},
      {"input": "\"06\"", "expected_output": "0"},
      {"input": "\"1\"", "expected_output": "1"},
      {"input": "\"27\"", "expected_output": "1"}
    ]
  },
  {
    "id": 228,
    "category": "strings",
    "difficulty": "medium",
    "question": "Word break.",
    "testcases": [
      {"input": "\"leetcode\", [\"leet\",\"code\"]", "expected_output": "true"},
      {"input": "\"applepenapple\", [\"apple\",\"pen\"]", "expected_output": "true"},
      {"input": "\"catsandog\", [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]", "expected_output": "false"},
      {"input": "\"a\", [\"a\"]", "expected_output": "true"},
      {"input": "\"\", []", "expected_output": "true"}
    ]
  },
  {
    "id": 229,
    "category": "strings",
    "difficulty": "medium",
    "question": "Longest valid parentheses.",
    "testcases": [
      {"input": "\")()())\"", "expected_output": "4"},
      {"input": "\"(()\"", "expected_output": "2"},
      {"input": "\"\"", "expected_output": "0"},
      {"input": "\"()\"", "expected_output": "2"},
      {"input": "\"(()))()()\"", "expected_output": "4"}
    ]
  },
  {
    "id": 230,
    "category": "strings",
    "difficulty": "medium",
    "question": "Generate parentheses.",
    "testcases": [
      {"input": "3", "expected_output": "[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]"},
      {"input": "1", "expected_output": "[\"()\"]"},
      {"input": "0", "expected_output": "[\"\"]"},
      {"input": "2", "expected_output": "[\"(())\",\"()()\"]"},
      {"input": "4", "expected_output": "14 combinations"}
    ]
  },
  {
    "id": 231,
    "category": "linked lists",
    "difficulty": "medium",
    "question": "Reorder list.",
    "testcases": [
      {"input": "1->2->3->4", "expected_output": "1->4->2->3"},
      {"input": "1->2->3->4->5", "expected_output": "1->5->2->4->3"},
      {"input": "null", "expected_output": "null"},
      {"input": "1->null", "expected_output": "1->null"},
      {"input": "1->2", "expected_output": "1->2"}
    ]
  },
  {
    "id": 232,
    "category": "linked lists",
    "difficulty": "medium",
    "question": "Sort list.",
    "testcases": [
      {"input": "4->2->1->3", "expected_output": "1->2->3->4"},
      {"input": "-1->5->3->4->0", "expected_output": "-1->0->3->4->5"},
      {"input": "null", "expected_output": "null"},
      {"input": "1->null", "expected_output": "1->null"},
      {"input": "2->1", "expected_output": "1->2"}
    ]
  },
  {
    "id": 233,
    "category": "linked lists",
    "difficulty": "medium",
    "question": "Insertion sort list.",
    "testcases": [
      {"input": "4->2->1->3", "expected_output": "1->2->3->4"},
      {"input": "-1->5->3->4->0", "expected_output": "-1->0->3->4->5"},
      {"input": "null", "expected_output": "null"},
      {"input": "1->null", "expected_output": "1->null"},
      {"input": "3->2->1", "expected_output": "1->2->3"}
    ]
  },
  {
    "id": 234,
    "category": "linked lists",
    "difficulty": "medium",
    "question": "Partition list.",
    "testcases": [
      {"input": "1->4->3->2->5->2, x=3", "expected_output": "1->2->2->4->3->5"},
      {"input": "2->1, x=2", "expected_output": "1->2"},
      {"input": "null, x=0", "expected_output": "null"},
      {"input": "5->null, x=6", "expected_output": "5->null"},
      {"input": "1->2->3, x=1", "expected_output": "1->2->3"}
    ]
  },
  {
    "id": 235,
    "category": "linked lists",
    "difficulty": "medium",
    "question": "Reverse linked list II.",
    "testcases": [
      {"input": "1->2->3->4->5, left=2, right=4", "expected_output": "1->4->3->2->5"},
      {"input": "5->null, left=1, right=1", "expected_output": "5->null"},
      {"input": "null, left=1, right=1", "expected_output": "null"},
      {"input": "1->2, left=1, right=2", "expected_output": "2->1"},
      {"input": "3->2->1, left=1, right=3", "expected_output": "1->2->3"}
    ]
  },
  {
    "id": 236,
    "category": "linked lists",
    "difficulty": "medium",
    "question": "Rotate list.",
    "testcases": [
      {"input": "1->2->3->4->5, k=2", "expected_output": "4->5->1->2->3"},
      {"input": "0->1->2, k=4", "expected_output": "2->0->1"},
      {"input": "null, k=0", "expected_output": "null"},
      {"input": "5->null, k=1", "expected_output": "5->null"},
      {"input": "1->2, k=0", "expected_output": "1->2"}
    ]
  },
  {
    "id": 237,
    "category": "linked lists",
    "difficulty": "medium",
    "question": "Copy list with random pointer.",
    "testcases": [
      {"input": "1->2->3 with randoms", "expected_output": "copied list"},
      {"input": "null", "expected_output": "null"},
      {"input": "5->null", "expected_output": "copied"},
      {"input": "1->2 with random to self", "expected_output": "copied"},
      {"input": "0->1 with random", "expected_output": "copied"}
    ]
  },
  {
    "id": 238,
    "category": "linked lists",
    "difficulty": "medium",
    "question": "LRU cache.",
    "testcases": [
      {"input": "capacity=2, put(1,1), put(2,2), get(1), put(3,3), get(2)", "expected_output": "1,-1"},
      {"input": "capacity=1, put(1,1), get(1)", "expected_output": "1"},
      {"input": "capacity=0, put(1,1), get(1)", "expected_output": "-1"},
      {"input": "capacity=3, put(1,1), put(2,2), put(3,3), put(4,4), get(1)", "expected_output": "-1"},
      {"input": "capacity=2, put(2,1), put(1,1), put(2,3), put(4,1), get(1), get(2)", "expected_output": "-1,3"}
    ]
  },
  {
    "id": 239,
    "category": "linked lists",
    "difficulty": "medium",
    "question": "Flatten multilevel doubly linked list.",
    "testcases": [
      {"input": "1<->2<->3<->7<->8<->9<->10<->4<->5<->6<->11<->12", "expected_output": "flattened"},
      {"input": "null", "expected_output": "null"},
      {"input": "5<->null", "expected_output": "5<->null"},
      {"input": "1<->2 with child", "expected_output": "flattened"},
      {"input": "0<->1<->2", "expected_output": "0<->1<->2"}
    ]
  },
  {
    "id": 240,
    "category": "linked lists",
    "difficulty": "medium",
    "question": "Remove zero sum consecutive nodes.",
    "testcases": [
      {"input": "1->2->-3->3->1", "expected_output": "3->1"},
      {"input": "1->2->3->-3->4", "expected_output": "1->2->4"},
      {"input": "1->2->3->-3->-2", "expected_output": "1"},
      {"input": "5->null", "expected_output": "5->null"},
      {"input": "0->1->-1", "expected_output": "null"}
    ]
  },
  {
    "id": 241,
    "category": "dynamic programming",
    "difficulty": "medium",
    "question": "Longest increasing subsequence.",
    "testcases": [
      {"input": "[10,9,2,5,3,7,101,18]", "expected_output": "4"},
      {"input": "[0,1,0,3,2,3]", "expected_output": "4"},
      {"input": "[7,7,7,7,7,7,7]", "expected_output": "1"},
      {"input": "[1,3,5,4,7]", "expected_output": "3"},
      {"input": "[2,2,2]", "expected_output": "1"}
    ]
  },
  {
    "id": 242,
    "category": "dynamic programming",
    "difficulty": "medium",
    "question": "Unique paths.",
    "testcases": [
      {"input": "3,7", "expected_output": "28"},
      {"input": "3,2", "expected_output": "3"},
      {"input": "1,1", "expected_output": "1"},
      {"input": "2,2", "expected_output": "2"},
      {"input": "1,5", "expected_output": "1"}
    ]
  },
  {
    "id": 243,
    "category": "dynamic programming",
    "difficulty": "medium",
    "question": "Coin change (minimum coins).",
    "testcases": [
      {"input": "amount=11, coins=[1,2,5]", "expected_output": "3"},
      {"input": "amount=3, coins=[2]", "expected_output": "-1"},
      {"input": "amount=0, coins=[1]", "expected_output": "0"},
      {"input": "amount=1, coins=[1]", "expected_output": "1"},
      {"input": "amount=4, coins=[1,3]", "expected_output": "2"}
    ]
  },
  {
    "id": 244,
    "category": "dynamic programming",
    "difficulty": "medium",
    "question": "Longest common subsequence.",
    "testcases": [
      {"input": "\"abcde\",\"ace\"", "expected_output": "3"},
      {"input": "\"abc\",\"abc\"", "expected_output": "3"},
      {"input": "\"abc\",\"def\"", "expected_output": "0"},
      {"input": "\"a\",\"a\"", "expected_output": "1"},
      {"input": "\"\",\"\"", "expected_output": "0"}
    ]
  },
  {
    "id": 245,
    "category": "dynamic programming",
    "difficulty": "medium",
    "question": "Maximum subarray.",
    "testcases": [
      {"input": "[-2,1,-3,4,-1,2,1,-5,4]", "expected_output": "6"},
      {"input": "[5,4,-1,7,8]", "expected_output": "23"},
      {"input": "[1]", "expected_output": "1"},
      {"input": "[-1]", "expected_output": "-1"},
      {"input": "[0, -3, 1]", "expected_output": "1"}
    ]
  },
  {
    "id": 246,
    "category": "dynamic programming",
    "difficulty": "medium",
    "question": "House robber II.",
    "testcases": [
      {"input": "[2,3,2]", "expected_output": "3"},
      {"input": "[1,2,3,1]", "expected_output": "4"},
      {"input": "[1]", "expected_output": "1"},
      {"input": "[0]", "expected_output": "0"},
      {"input": "[1,2]", "expected_output": "2"}
    ]
  },
  {
    "id": 247,
    "category": "dynamic programming",
    "difficulty": "medium",
    "question": "Jump game.",
    "testcases": [
      {"input": "[2,3,1,1,4]", "expected_output": "true"},
      {"input": "[3,2,1,0,4]", "expected_output": "false"},
      {"input": "[0]", "expected_output": "true"},
      {"input": "[1,2]", "expected_output": "true"},
      {"input": "[1,0,3]", "expected_output": "false"}
    ]
  },
  {
    "id": 248,
    "category": "dynamic programming",
    "difficulty": "medium",
    "question": "Unique binary search trees.",
    "testcases": [
      {"input": "3", "expected_output": "5"},
      {"input": "1", "expected_output": "1"},
      {"input": "2", "expected_output": "2"},
      {"input": "4", "expected_output": "14"},
      {"input": "0", "expected_output": "1"}
    ]
  },
  {
    "id": 249,
    "category": "dynamic programming",
    "difficulty": "medium",
    "question": "Maximum product subarray.",
    "testcases": [
      {"input": "[2,3,-2,4]", "expected_output": "6"},
      {"input": "[-2,0,-1]", "expected_output": "0"},
      {"input": "[-2,3,-4]", "expected_output": "24"},
      {"input": "[1]", "expected_output": "1"},
      {"input": "[0]", "expected_output": "0"}
    ]
  },
  {
    "id": 250,
    "category": "dynamic programming",
    "difficulty": "medium",
    "question": "Edit distance.",
    "testcases": [
      {"input": "\"horse\",\"ros\"", "expected_output": "3"},
      {"input": "\"intention\",\"execution\"", "expected_output": "5"},
      {"input": "\"a\",\"a\"", "expected_output": "0"},
      {"input": "\"\",\"\"", "expected_output": "0"},
      {"input": "\"ab\",\"a\"", "expected_output": "1"}
    ]
  }
,
  {
    "id": 251,
    "category": "hash tables",
    "difficulty": "medium",
    "question": "Longest substring without repeating characters.",
    "testcases": [
      {"input": "\"abcabcbb\"", "expected_output": "3"},
      {"input": "\"bbbbb\"", "expected_output": "1"},
      {"input": "\"pwwkew\"", "expected_output": "3"},
      {"input": "\"\"", "expected_output": "0"},
      {"input": "\"dvdf\"", "expected_output": "3"}
    ]
  },
  {
    "id": 252,
    "category": "hash tables",
    "difficulty": "medium",
    "question": "Subarray sum equals k.",
    "testcases": [
      {"input": "[1,1,1], k=2", "expected_output": "2"},
      {"input": "[1,2,3], k=3", "expected_output": "2"},
      {"input": "[-1,-1,1], k=0", "expected_output": "1"},
      {"input": "[0,0,0], k=0", "expected_output": "6"},
      {"input": "[1], k=1", "expected_output": "1"}
    ]
  },
  {
    "id": 253,
    "category": "hash tables",
    "difficulty": "medium",
    "question": "Sort characters by frequency.",
    "testcases": [
      {"input": "\"tree\"", "expected_output": "\"eetr\""},
      {"input": "\"cccaaa\"", "expected_output": "\"cccaaa\""},
      {"input": "\"Aabb\"", "expected_output": "\"bbAa\""},
      {"input": "\"a\"", "expected_output": "\"a\""},
      {"input": "\"\"", "expected_output": "\"\""}
    ]
  },
  {
    "id": 254,
    "category": "hash tables",
    "difficulty": "medium",
    "question": "Top k frequent elements.",
    "testcases": [
      {"input": "[1,1,1,2,2,3], k=2", "expected_output": "[1,2]"},
      {"input": "[1], k=1", "expected_output": "[1]"},
      {"input": "[3,0,1,0], k=1", "expected_output": "[0]"},
      {"input": "[4,4,4,5,5], k=2", "expected_output": "[4,5]"},
      {"input": "[-1,-1,-1], k=1", "expected_output": "[-1]"}
    ]
  },
  {
    "id": 255,
    "category": "hash tables",
    "difficulty": "medium",
    "question": "Longest palindrome.",
    "testcases": [
      {"input": "\"abccccdd\"", "expected_output": "7"},
      {"input": "\"a\"", "expected_output": "1"},
      {"input": "\"Aa\"", "expected_output": "1"},
      {"input": "\"ccc\"", "expected_output": "3"},
      {"input": "\"\"", "expected_output": "0"}
    ]
  },
  {
    "id": 256,
    "category": "hash tables",
    "difficulty": "medium",
    "question": "Design hashmap.",
    "testcases": [
      {"input": "put(1,1), get(1), remove(1), get(1)", "expected_output": "1,-1"},
      {"input": "put(2,2), get(2)", "expected_output": "2"},
      {"input": "put(0,0), get(0)", "expected_output": "0"},
      {"input": "put(1,10), put(1,20), get(1)", "expected_output": "20"},
      {"input": "remove(5), get(5)", "expected_output": "-1"}
    ]
  },
  {
    "id": 257,
    "category": "hash tables",
    "difficulty": "medium",
    "question": "Randomized set.",
    "testcases": [
      {"input": "insert 1, remove 2, insert 2, getRandom, remove 1, insert 2, getRandom", "expected_output": "operations"},
      {"input": "insert 0, getRandom", "expected_output": "0"},
      {"input": "insert 5, remove 5", "expected_output": "true"},
      {"input": "insert 1, insert 1", "expected_output": "false"},
      {"input": "remove 10", "expected_output": "false"}
    ]
  },
  {
    "id": 258,
    "category": "hash tables",
    "difficulty": "medium",
    "question": "LRU cache.",
    "testcases": [
      {"input": "capacity=2, operations as before", "expected_output": "same"},
      {"input": "capacity=1, put 1 1, get 1", "expected_output": "1"},
      {"input": "capacity=3, put 1 1, put 2 2, put 3 3, get 1", "expected_output": "1"},
      {"input": "put 4 4, get 2", "expected_output": "-1"},
      {"input": "put 3 3, get 3", "expected_output": "3"}
    ]
  },
  {
    "id": 259,
    "category": "hash tables",
    "difficulty": "medium",
    "question": "Brick wall.",
    "testcases": [
      {"input": "[[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]", "expected_output": "2"},
      {"input": "[[1],[1],[1]]", "expected_output": "3"},
      {"input": "[[2]]", "expected_output": "1"},
      {"input": "[[1,1],[2]]", "expected_output": "1"},
      {"input": "[[3],[1,2]]", "expected_output": "1"}
    ]
  },
  {
    "id": 260,
    "category": "hash tables",
    "difficulty": "medium",
    "question": "Contiguous array.",
    "testcases": [
      {"input": "[0,1]", "expected_output": "2"},
      {"input": "[0,1,0]", "expected_output": "2"},
      {"input": "[1,1,1]", "expected_output": "0"},
      {"input": "[0,0,1,1]", "expected_output": "4"},
      {"input": "[1,0,1,0,1]", "expected_output": "4"}
    ]
  },
  {
    "id": 261,
    "category": "recursion",
    "difficulty": "medium",
    "question": "Generate parentheses.",
    "testcases": [
      {"input": "3", "expected_output": "[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]"},
      {"input": "1", "expected_output": "[\"()\"]"},
      {"input": "2", "expected_output": "[\"(())\",\"()()\"]"},
      {"input": "0", "expected_output": "[]"},
      {"input": "4", "expected_output": "14 items"}
    ]
  },
  {
    "id": 262,
    "category": "recursion",
    "difficulty": "medium",
    "question": "Subsets.",
    "testcases": [
      {"input": "[1,2,3]", "expected_output": "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]"},
      {"input": "[0]", "expected_output": "[[],[0]]"},
      {"input": "[]", "expected_output": "[[]]"},
      {"input": "[1,2]", "expected_output": "[[],[1],[2],[1,2]]"},
      {"input": "[3,4]", "expected_output": "[[],[3],[4],[3,4]]"}
    ]
  },
  {
    "id": 263,
    "category": "recursion",
    "difficulty": "medium",
    "question": "Permutations.",
    "testcases": [
      {"input": "[1,2,3]", "expected_output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]"},
      {"input": "[0,1]", "expected_output": "[[0,1],[1,0]]"},
      {"input": "[1]", "expected_output": "[[1]]"},
      {"input": "[]", "expected_output": "[[]]"},
      {"input": "[2,2]", "expected_output": "[[2,2],[2,2]]"}
    ]
  },
  {
    "id": 264,
    "category": "recursion",
    "difficulty": "medium",
    "question": "Letter combinations of phone number.",
    "testcases": [
      {"input": "\"23\"", "expected_output": "[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]"},
      {"input": "\"\"", "expected_output": "[]"},
      {"input": "\"2\"", "expected_output": "[\"a\",\"b\",\"c\"]"},
      {"input": "\"9\"", "expected_output": "[\"w\",\"x\",\"y\",\"z\"]"},
      {"input": "\"24\"", "expected_output": "12 combinations"}
    ]
  },
  {
    "id": 265,
    "category": "recursion",
    "difficulty": "medium",
    "question": "Combination sum.",
    "testcases": [
      {"input": "[2,3,6,7], target=7", "expected_output": "[[2,2,3],[7]]"},
      {"input": "[2,3,5], target=8", "expected_output": "[[2,2,2,2],[2,3,3],[3,5]]"},
      {"input": "[2], target=1", "expected_output": "[]"},
      {"input": "[1], target=1", "expected_output": "[[1]]"},
      {"input": "[1,2], target=3", "expected_output": "[[1,1,1],[1,2]]"}
    ]
  },
  {
    "id": 266,
    "category": "recursion",
    "difficulty": "medium",
    "question": "Word search.",
    "testcases": [
      {"input": "board=[[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word=\"ABCCED\"", "expected_output": "true"},
      {"input": "same board, word=\"SEE\"", "expected_output": "true"},
      {"input": "same board, word=\"ABCB\"", "expected_output": "false"},
      {"input": "board=[[\"a\"]], word=\"a\"", "expected_output": "true"},
      {"input": "board=[[]], word=\"\"", "expected_output": "false"}
    ]
  },
  {
    "id": 267,
    "category": "recursion",
    "difficulty": "medium",
    "question": "N-queens.",
    "testcases": [
      {"input": "4", "expected_output": "2 solutions"},
      {"input": "1", "expected_output": "1 solution"},
      {"input": "2", "expected_output": "0"},
      {"input": "3", "expected_output": "0"},
      {"input": "5", "expected_output": "10 solutions"}
    ]
  },
  {
    "id": 268,
    "category": "recursion",
    "difficulty": "medium",
    "question": "Sudoku solver.",
    "testcases": [
      {"input": "standard unsolved sudoku", "expected_output": "solved sudoku"},
      {"input": "empty board", "expected_output": "solved"},
      {"input": "invalid board", "expected_output": "no solution"},
      {"input": "solved board", "expected_output": "same"},
      {"input": "minimal clues", "expected_output": "solved"}
    ]
  },
  {
    "id": 269,
    "category": "recursion",
    "difficulty": "medium",
    "question": "Subsets II (with duplicates).",
    "testcases": [
      {"input": "[1,2,2]", "expected_output": "[[],[1],[1,2],[1,2,2],[2],[2,2]]"},
      {"input": "[0]", "expected_output": "[[],[0]]"},
      {"input": "[1,1]", "expected_output": "[[],[1],[1,1]]"},
      {"input": "[]", "expected_output": "[[]]"},
      {"input": "[2,2,2]", "expected_output": "[[],[2],[2,2],[2,2,2]]"}
    ]
  },
  {
    "id": 270,
    "category": "recursion",
    "difficulty": "medium",
    "question": "Permutations II (with duplicates).",
    "testcases": [
      {"input": "[1,1,2]", "expected_output": "[[1,1,2],[1,2,1],[2,1,1]]"},
      {"input": "[1,2,3]", "expected_output": "6 unique"},
      {"input": "[1,1]", "expected_output": "[[1,1]]"},
      {"input": "[1]", "expected_output": "[[1]]"},
      {"input": "[]", "expected_output": "[[]]"}
    ]
  },
  {
    "id": 271,
    "category": "arrays",
    "difficulty": "hard",
    "question": "Trapping rain water.",
    "testcases": [
      {"input": "[0,1,0,2,1,0,1,3,2,1,2,1]", "expected_output": "6"},
      {"input": "[4,2,0,3,2,5]", "expected_output": "9"},
      {"input": "[1,2,3]", "expected_output": "0"},
      {"input": "[5,4,3,2,1]", "expected_output": "0"},
      {"input": "[0,0,0]", "expected_output": "0"}
    ]
  },
  {
    "id": 272,
    "category": "arrays",
    "difficulty": "hard",
    "question": "Median of two sorted arrays.",
    "testcases": [
      {"input": "[1,3],[2]", "expected_output": "2.0"},
      {"input": "[1,2],[3,4]", "expected_output": "2.5"},
      {"input": "[],[1]", "expected_output": "1.0"},
      {"input": "[1],[2,3]", "expected_output": "2.0"},
      {"input": "[4,5,6],[1,2,3]", "expected_output": "3.5"}
    ]
  },
  {
    "id": 273,
    "category": "arrays",
    "difficulty": "hard",
    "question": "First missing positive.",
    "testcases": [
      {"input": "[1,2,0]", "expected_output": "3"},
      {"input": "[3,4,-1,1]", "expected_output": "2"},
      {"input": "[7,8,9,11,12]", "expected_output": "1"},
      {"input": "[1]", "expected_output": "2"},
      {"input": "[]", "expected_output": "1"}
    ]
  },
  {
    "id": 274,
    "category": "arrays",
    "difficulty": "hard",
    "question": "Largest rectangle in histogram.",
    "testcases": [
      {"input": "[2,1,5,6,2,3]", "expected_output": "10"},
      {"input": "[2,4]", "expected_output": "4"},
      {"input": "[1,1,1]", "expected_output": "3"},
      {"input": "[5]", "expected_output": "5"},
      {"input": "[0,0]", "expected_output": "0"}
    ]
  },
  {
    "id": 275,
    "category": "arrays",
    "difficulty": "hard",
    "question": "Sliding window maximum.",
    "testcases": [
      {"input": "[1,3,-1,-3,5,3,6,7], k=3", "expected_output": "[3,3,5,5,6,7]"},
      {"input": "[1], k=1", "expected_output": "[1]"},
      {"input": "[1,-1], k=1", "expected_output": "[1,-1]"},
      {"input": "[9,11], k=2", "expected_output": "[11]"},
      {"input": "[4,-2,3], k=2", "expected_output": "[4,3]"}
    ]
  },
  {
    "id": 276,
    "category": "arrays",
    "difficulty": "hard",
    "question": "Candy.",
    "testcases": [
      {"input": "[1,0,2]", "expected_output": "5"},
      {"input": "[1,2,2]", "expected_output": "4"},
      {"input": "[1]", "expected_output": "1"},
      {"input": "[3,2,1]", "expected_output": "6"},
      {"input": "[1,3,2,2,1]", "expected_output": "7"}
    ]
  },
  {
    "id": 277,
    "category": "arrays",
    "difficulty": "hard",
    "question": "Maximal rectangle.",
    "testcases": [
      {"input": "[[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]", "expected_output": "6"},
      {"input": "[[\"0\"]]", "expected_output": "0"},
      {"input": "[[\"1\"]]", "expected_output": "1"},
      {"input": "[[\"0\",\"0\"]]", "expected_output": "0"},
      {"input": "[[\"1\",\"1\"]]", "expected_output": "2"}
    ]
  },
  {
    "id": 278,
    "category": "arrays",
    "difficulty": "hard",
    "question": "Merge k sorted lists.",
    "testcases": [
      {"input": "[1->4->5,1->3->4,2->6]", "expected_output": "1->1->2->3->4->4->5->6"},
      {"input": "[]", "expected_output": "null"},
      {"input": "[null]", "expected_output": "null"},
      {"input": "[2->4,1->3]", "expected_output": "1->2->3->4"},
      {"input": "[5]", "expected_output": "5"}
    ]
  },
  {
    "id": 279,
    "category": "arrays",
    "difficulty": "hard",
    "question": "Reverse pairs.",
    "testcases": [
      {"input": "[1,3,2,3,1]", "expected_output": "2"},
      {"input": "[2,4,3,5,1]", "expected_output": "3"},
      {"input": "[1,2,3]", "expected_output": "0"},
      {"input": "[5,4,3]", "expected_output": "3"},
      {"input": "[0]", "expected_output": "0"}
    ]
  },
  {
    "id": 280,
    "category": "arrays",
    "difficulty": "hard",
    "question": "Minimum cost to merge stones.",
    "testcases": [
      {"input": "[3,2,4,1], k=2", "expected_output": "20"},
      {"input": "[3,2], k=2", "expected_output": "5"},
      {"input": "[1], k=2", "expected_output": "0"},
      {"input": "[4,3,3,4], k=2", "expected_output": "25"},
      {"input": "[1,2,3], k=3", "expected_output": "6"}
    ]
  },
  {
    "id": 281,
    "category": "dynamic programming",
    "difficulty": "hard",
    "question": "Burst balloons.",
    "testcases": [
      {"input": "[3,1,5,8]", "expected_output": "167"},
      {"input": "[1,5]", "expected_output": "10"},
      {"input": "[1]", "expected_output": "1"},
      {"input": "[2,3]", "expected_output": "12"},
      {"input": "[0,0,0]", "expected_output": "0"}
    ]
  },
  {
    "id": 282,
    "category": "dynamic programming",
    "difficulty": "hard",
    "question": "Palindrome partitioning II.",
    "testcases": [
      {"input": "\"aab\"", "expected_output": "1"},
      {"input": "\"a\"", "expected_output": "0"},
      {"input": "\"ab\"", "expected_output": "1"},
      {"input": "\"aaa\"", "expected_output": "0"},
      {"input": "\"abcd\"", "expected_output": "3"}
    ]
  },
  {
    "id": 283,
    "category": "dynamic programming",
    "difficulty": "hard",
    "question": "Scramble string.",
    "testcases": [
      {"input": "\"great\",\"rgeat\"", "expected_output": "true"},
      {"input": "\"abcde\",\"caebd\"", "expected_output": "false"},
      {"input": "\"a\",\"a\"", "expected_output": "true"},
      {"input": "\"ab\",\"ba\"", "expected_output": "true"},
      {"input": "\"a\",\"b\"", "expected_output": "false"}
    ]
  },
  {
    "id": 284,
    "category": "dynamic programming",
    "difficulty": "hard",
    "question": "Best time to buy and sell stock III.",
    "testcases": [
      {"input": "[3,3,5,0,0,3,1,4]", "expected_output": "6"},
      {"input": "[1,2,3,4,5]", "expected_output": "4"},
      {"input": "[7,6,4,3,1]", "expected_output": "0"},
      {"input": "[1]", "expected_output": "0"},
      {"input": "[2,1,2,0,1]", "expected_output": "2"}
    ]
  },
  {
    "id": 285,
    "category": "dynamic programming",
    "difficulty": "hard",
    "question": "Best time to buy and sell stock IV.",
    "testcases": [
      {"input": "k=2, [2,4,1]", "expected_output": "2"},
      {"input": "k=2, [3,2,6,5,0,3]", "expected_output": "7"},
      {"input": "k=1, [1,2,3]", "expected_output": "2"},
      {"input": "k=0, [1,2]", "expected_output": "0"},
      {"input": "k=3, [1,3,2,4]", "expected_output": "4"}
    ]
  },
  {
    "id": 286,
    "category": "dynamic programming",
    "difficulty": "hard",
    "question": "Longest valid parentheses.",
    "testcases": [
      {"input": "\")()())\"", "expected_output": "4"},
      {"input": "\"(()\"", "expected_output": "2"},
      {"input": "\"()(()\"", "expected_output": "2"},
      {"input": "\"\"", "expected_output": "0"},
      {"input": "\"()()\"", "expected_output": "4"}
    ]
  },
  {
    "id": 287,
    "category": "dynamic programming",
    "difficulty": "hard",
    "question": "Edit distance.",
    "testcases": [
      {"input": "\"horse\",\"ros\"", "expected_output": "3"},
      {"input": "\"intention\",\"execution\"", "expected_output": "5"},
      {"input": "\"a\",\"b\"", "expected_output": "1"},
      {"input": "\"\",\"a\"", "expected_output": "1"},
      {"input": "\"abc\",\"abc\"", "expected_output": "0"}
    ]
  },
  {
    "id": 288,
    "category": "dynamic programming",
    "difficulty": "hard",
    "question": "Minimum path sum.",
    "testcases": [
      {"input": "[[1,3,1],[1,5,1],[4,2,1]]", "expected_output": "7"},
      {"input": "[[1,2,3],[4,5,6]]", "expected_output": "12"},
      {"input": "[[1]]", "expected_output": "1"},
      {"input": "[[0,1],[1,0]]", "expected_output": "1"},
      {"input": "[[2,3],[1,4]]", "expected_output": "4"}
    ]
  },
  {
    "id": 289,
    "category": "dynamic programming",
    "difficulty": "hard",
    "question": "Wildcard matching.",
    "testcases": [
      {"input": "\"aa\",\"*\"", "expected_output": "true"},
      {"input": "\"cb\",\"?a\"", "expected_output": "false"},
      {"input": "\"adceb\",\"*a*b\"", "expected_output": "true"},
      {"input": "\"\",\"*\"", "expected_output": "true"},
      {"input": "\"a\",\"a*\"", "expected_output": "true"}
    ]
  },
  {
    "id": 290,
    "category": "dynamic programming",
    "difficulty": "hard",
    "question": "Regular expression matching.",
    "testcases": [
      {"input": "\"aa\",\"a\"", "expected_output": "false"},
      {"input": "\"aa\",\"a*\"", "expected_output": "true"},
      {"input": "\"ab\",\".*\"", "expected_output": "true"},
      {"input": "\"aab\",\"c*a*b\"", "expected_output": "true"},
      {"input": "\"mississippi\",\"mis*is*p*.\"", "expected_output": "false"}
    ]
  },
  {
    "id": 291,
    "category": "graphs",
    "difficulty": "hard",
    "question": "Word ladder II.",
    "testcases": [
      {"input": "begin=\"hit\", end=\"cog\", wordList=[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]", "expected_output": "[[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]"},
      {"input": "begin=\"hit\", end=\"cog\", wordList=[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]", "expected_output": "[]"},
      {"input": "begin=\"a\", end=\"c\", wordList=[\"a\",\"b\",\"c\"]", "expected_output": "[[\"a\",\"c\"]]"},
      {"input": "begin=\"red\", end=\"tax\", wordList=[\"ted\",\"tex\",\"red\",\"tax\",\"tad\",\"den\",\"rex\",\"pee\"]", "expected_output": "paths"},
      {"input": "begin=\"aa\", end=\"bb\", wordList=[\"ab\",\"bb\"]", "expected_output": "[[\"aa\",\"ab\",\"bb\"]]"}
    ]
  },
  {
    "id": 292,
    "category": "graphs",
    "difficulty": "hard",
    "question": "Critical connections in a network.",
    "testcases": [
      {"input": "n=4, connections=[[0,1],[1,2],[2,0],[1,3]]", "expected_output": "[[1,3]]"},
      {"input": "n=2, connections=[[0,1]]", "expected_output": "[[0,1]]"},
      {"input": "n=1, connections=[]", "expected_output": "[]"},
      {"input": "n=3, connections=[[0,1],[1,2]]", "expected_output": "[[0,1],[1,2]]"},
      {"input": "n=5, connections=[[0,1],[1,2],[2,3],[3,4],[4,0]]", "expected_output": "[]"}
    ]
  },
  {
    "id": 293,
    "category": "graphs",
    "difficulty": "hard",
    "question": "Minimum number of days to eat n oranges.",
    "testcases": [
      {"input": "10", "expected_output": "4"},
      {"input": "6", "expected_output": "3"},
      {"input": "1", "expected_output": "1"},
      {"input": "2", "expected_output": "2"},
      {"input": "3", "expected_output": "2"}
    ]
  },
  {
    "id": 294,
    "category": "graphs",
    "difficulty": "hard",
    "question": "Making a large island.",
    "testcases": [
      {"input": "[[1,0],[0,1]]", "expected_output": "3"},
      {"input": "[[1,1],[1,0]]", "expected_output": "4"},
      {"input": "[[0]]", "expected_output": "1"},
      {"input": "[[1]]", "expected_output": "1"},
      {"input": "[[0,0],[0,0]]", "expected_output": "1"}
    ]
  },
  {
    "id": 295,
    "category": "graphs",
    "difficulty": "hard",
    "question": "Shortest path in binary matrix.",
    "testcases": [
      {"input": "[[0,1],[1,0]]", "expected_output": "2"},
      {"input": "[[0,0,0],[1,1,0],[1,1,0]]", "expected_output": "4"},
      {"input": "[[1]]", "expected_output": "-1"},
      {"input": "[[0]]", "expected_output": "1"},
      {"input": "[[0,1,0],[1,1,1],[0,1,0]]", "expected_output": "-1"}
    ]
  },
  {
    "id": 296,
    "category": "graphs",
    "difficulty": "hard",
    "question": "Bus routes.",
    "testcases": [
      {"input": "routes=[[1,2,7],[3,6,7]], source=1, target=6", "expected_output": "2"},
      {"input": "routes=[[7,12],[4,5,15],[6],[15,19],[9,12,13]], source=15, target=12", "expected_output": "-1"},
      {"input": "routes=[[1]], source=1, target=1", "expected_output": "0"},
      {"input": "routes=[[1,2],[3,4]], source=1, target=4", "expected_output": "-1"},
      {"input": "routes=[[1,2,3],[3,4]], source=1, target=4", "expected_output": "2"}
    ]
  },
  {
    "id": 297,
    "category": "graphs",
    "difficulty": "hard",
    "question": "Sliding puzzle.",
    "testcases": [
      {"input": "[[1,2,3],[4,0,5]]", "expected_output": "1"},
      {"input": "[[1,2,3],[5,4,0]]", "expected_output": "-1"},
      {"input": "[[4,1,2],[5,0,3]]", "expected_output": "5"},
      {"input": "[[0,1,2],[3,4,5]]", "expected_output": "0"},
      {"input": "[[3,2,5],[4,1,0]]", "expected_output": "something"}
    ]
  },
  {
    "id": 298,
    "category": "graphs",
    "difficulty": "hard",
    "question": "Swim in rising water.",
    "testcases": [
      {"input": "[[0,2],[1,3]]", "expected_output": "3"},
      {"input": "[[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]", "expected_output": "16"},
      {"input": "[[0]]", "expected_output": "0"},
      {"input": "[[1,0],[2,3]]", "expected_output": "3"},
      {"input": "[[3,2],[1,0]]", "expected_output": "3"}
    ]
  },
  {
    "id": 299,
    "category": "graphs",
    "difficulty": "hard",
    "question": "Find the shortest bridge.",
    "testcases": [
      {"input": "[[0,1],[1,0]]", "expected_output": "1"},
      {"input": "[[0,1,0],[0,0,0],[0,0,1]]", "expected_output": "2"},
      {"input": "[[1]]", "expected_output": "0"},
      {"input": "[[1,0],[0,1]]", "expected_output": "1"},
      {"input": "[[0,0],[0,0]]", "expected_output": "-1"}
    ]
  },
  {
    "id": 300,
    "category": "graphs",
    "difficulty": "hard",
    "question": "Minimum obstacle removal to reach corner.",
    "testcases": [
      {"input": "[[0,0,0],[0,1,0],[0,0,0]]", "expected_output": "0"},
      {"input": "[[0,1,0],[0,1,0],[0,0,0]]", "expected_output": "0"},
      {"input": "[[0,1,1],[1,1,0],[1,0,0]]", "expected_output": "something"},
      {"input": "[[0]]", "expected_output": "0"},
      {"input": "[[0,1],[1,0]]", "expected_output": "0"}
    ]
  },
  {
    "id": 301,
    "category": "math",
    "difficulty": "easy",
    "question": "Return the same number that was given as input.",
    "testcases": [
      { "input": "5\n", "expected_output": "5\n" },
      { "input": "42\n", "expected_output": "42\n" },
      { "input": "-7\n", "expected_output": "-7\n" }
    ]
  },
  {
    "id": 302,
    "category": "math",
    "difficulty": "easy",
    "question": "Return the number plus 1.",
    "testcases": [
      { "input": "1\n", "expected_output": "2\n" },
      { "input": "10\n", "expected_output": "11\n" },
      { "input": "-3\n", "expected_output": "-2\n" }
    ]
  },
  {
    "id": 303,
    "category": "strings",
    "difficulty": "easy",
    "question": "Return the same string given as input.",
    "testcases": [
      { "input": "hello\n", "expected_output": "hello\n" },
      { "input": "abc\n", "expected_output": "abc\n" },
      { "input": "\n", "expected_output": "\n" }
    ]
  },
  {
    "id": 304,
    "category": "logic",
    "difficulty": "easy",
    "question": "Return true if the number is positive, otherwise false.",
    "testcases": [
      { "input": "5\n", "expected_output": "true\n" },
      { "input": "-1\n", "expected_output": "false\n" },
      { "input": "0\n", "expected_output": "false\n" }
    ]
  },
  {
    "id": 305,
    "category": "arrays",
    "difficulty": "easy",
    "question": "Return the length of the array.",
    "testcases": [
      { "input": "3\n1 2 3\n", "expected_output": "3\n" },
      { "input": "0\n\n", "expected_output": "0\n" },
      { "input": "1\n42\n", "expected_output": "1\n" }
    ]
  }
]
